@function parse
  @added 2.0.0

  @description
    A function for parsing string containing quantum markup into JavaScript
    objects. The parser always returns a single entity with no type, called the
    root entity. The @code[contents] property of the root entity contains the
    content parsed content.

  @extra
    @subsection Example
      @@codeblock js
        const quantum = require('quantum-js')

        const markup = `
          @example param1 params2
            Content 1
            Content 2
        `

        console.log(quantum.parse(markup))
        /*
          {
            type: '',
            params: [],
            content: [
              {
                type: 'example',
                params: ['param1', 'param2'],
                content: ['Content 1', 'Content 2']
              }
            ]
          }
        */

    The parser returns an entity so that the results can be wrapped directly in
    a @type[Selection] using @code[quantum.select()]

  @param input [String]
    @description
      A string containing markup to parse. i.e. something that looks like this:

      @@codeblock um
        @example param1 params2
          Content 1
          Content 2

  @returns Object
    @description
      The parsed ast. Looks something like this:

      @codeblock js
        {
          type: '',
          params: [],
          content: [
            {
              type: 'example',
              params: ['param1', 'param2'],
              content: ['Content 1', 'Content 2']
            }
          ]
        }

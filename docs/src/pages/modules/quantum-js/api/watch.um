@function watch
  @added 2.0.0

  @description
    Watches a collection of files for changes. This also detects changes when
    inlined files are changed.

  @extra
    @subsection Example
      @codeblock js
        quantum.watch("src/**/*.um", (err, file, cause) => {
          // Example use: apply some transformation and write the file to disk
          return transformAndWrite(file)
        })


  @param specs [String/Object/Array]
    @description
      This describes the files to watch.

      It can be a single file:
      @@codeblock js
        quantum.watch("src/file.um", handler, options)

      Or a glob:
      @@codeblock js
        quantum.watch("src/**/*.um", handler, options)

      Or an array of globs:
      @@codeblock js
        quantum.watch(["src/**/*.um", "src2/**/index.um"], handler, options)

      Or a more structured object:
      @@codeblock js
        quantum.watch({
          files: 'src/**/*.um',
          base: 'src'
        }, handler, options)

      Or an array of these objects:
      @@codeblock js
        quantum.watch([
          {
            files: 'src/**/*.um',
            base: 'src'
          },
          {
            files: 'src2/**/index.um',
            base: 'src2'
          }
        ], handler, options)

  @param handler [Function]
    @description
      A callback that transforms a page. If this does anything asynchronous, it
      should return a @type[Promise]

    @param error [Error]
      @description
        This will be defined if there was an error when parsing the file. The
        handler has the option to handle this case if it wants to.
    @param page [Page]
      @description
        The page that has been loaded. This is the page that the handler should
        process / transform.
    @param cause [String]
      @description
        The reason this page is being transformed. Can be one of @code['build'],
        @code['add'] or @code['change']

    @returns [Page]
      @description
        The transformed page


  @param? options [Object]
    @property dir [String]
      @description
        The working directory for the watcher to work in
      @default: '.'

    @property dest [String]
      @description
        The default destination directory to write the files to
      @default: 'target'

    @property loader [Function]
      @description
        A function which loads files from disk, returning a @type[Promise]

      @param filename [String]
        @description
          The filename of the file to load

      @param parentFilename [String]
        @description
          The filename of the parent file - ie if this file is being loaded as the
          result of an @code[@inline] include, the parent file will be the one
          doing the inlining.

      @returns [Promise[String]]
        @description
          A promise yielding the contents of the file

      @default
        @@codeblock js
          const fs = require('fs')

          function (filename, parentFilename) {
            return new Promise((resolve, reject) => {
              return fs.readFile(filename, 'utf-8', (err, data) => {
                err ? reject(err) : resolve(data)
              })
            })
          }
    @property buildConcurrency [Number]
      @description
        The number of files to build concurrently
      @default: 1

    @property fileReader [Function]
      @description
        The function for reading a file and converting it to a @type[File].

      @param fileInfo [FileInfo]
        @description
          This describes which file to load. The file that is loaded should use
          this @type[FileInfo] as it's @code[fileInfo] property.

      @param? options [Object]
        @description
          The options to pass to the reader.

        @property loader [Function]
          @description
            @notice Important
              This loader must be used to read quantum files, in order for watch
              to function properly. If you want to use an alternative method for
              loading up files, use the @code[loader] option for the @code[watch]
              function.

            A function for loading a file from disk, returning a @type[Promise] that
            contains the contents of the file as a string that can be passed to the
            parser.

          @param filename [String]: The file/resource to load.
          @returns [Promise[String]]
            A promise that yields the contents of the file as a string.

      @default: @hyperlink(#read-as-file)[readAsFile]

      @returns [Promise[File]]
        @description
          A promise that yields the parsed AST wrapped up into a @type[File].


  @returns [Promise[Object]]
    @description
      Returns a @type[Promise] that contains an object. The promise will settle
      once all the watchers have been set up.

      The object the @type[Promise] yields looks like this:

      @@codeblock js
        {
          build: Function,
          events: EventEmitter
        }

      The @code[build] function will trigger a full build of the watched files
      when called.

      @code[events] gives you a way to listen for changes
      that are made to files.

      The possible events that can be emitted by this event emitter are:
      @code['error'], @code['add'], @code['change'], @code['delete'].

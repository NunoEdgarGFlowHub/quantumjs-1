@object builders
  @added 2.0.0
  @description
    Provides functions for building transforms for entities in languages.

  @property header [Function]
    @description
      Builds a header transform for constructing api/changelog headers for entities from a type and a details builder.

    @param type [String]
      @description
        The type of the header to build, for instance @code[function] or @code[object] that will be used to class the header.

        Headers are given the @code[qm-api-item-header] and @code[qm-api-item-header-<type>] classes.

    @param detailsBuilder [Function]
      @description
        The transform for creating the text to display in the header from an entity.

        It receives an entire api entity  including children.

      @param selection [Selection]
        @description
          The API entity as a selection (e.g. @code[@function]).

      @param transformer [Transformer]
        @description
          See @hyperlink(#TODO: Fix this link)[Transformer] for more details.

      @returns Element
        @description
          An element (or array of elements) containing the header information for an api entity

    @returns Transform

  @property body [Object]
    @description
      Provides @hyperlink(#TODO: Fix this link)[Transforms] for building the content of entities, such as descriptions or children.

    @property description [Transform]
      @description
        Builds a @code[@description] block like this block of text.

    @property groups [Transform]
      @description
        Builds @code[@group] blocks inside a selection.

    @property extras [Transform]
      @description
        Builds @code[@extra] blocks inside a selection for providing information, such as code examples or additional descriptions.

    @property default [Transform]
      @description
        Builds @code[@default] blocks for providing default values for parameters etc.

  @property item [Function]
    @description
      Provides a transform for rendering an api item, such as @code[@function], by providing a header and a set of transforms to apply to content.

    @param? options [Object]
      @property renderAsOther [Object]
      @property content [Array[Transform]]
      @property class [String]
      @property header [Transform]

    @returns Transform

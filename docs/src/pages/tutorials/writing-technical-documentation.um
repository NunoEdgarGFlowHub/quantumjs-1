@inline ../../templates/sidebar-page.um

@topSection
  @title Writing Technical Documentation
  @source [https://github.com/ocadotechnology/quantumjs/tree/master/docs/{{filename}}]: Edit Page
  @description
    This tutorial will guide you through use of some of the quantum modules for
    writing technical documentation

@contentSection
  @tableOfContents Contents

  @topic Setting Up

    @section About
      In this tutorial we will document a fictitious hot drink delivery service.

      This will include:
      @list
        @item: Setting up a project with @bold[quantum-hub]
        @item: Writing some general documentation using the @bold[quantum-docs] module
        @item: Documenting a javascript client library for the service with the @bold[quantum-api] and @bold[quantum-version] modules
        @item: Documenting the tea/coffee making process with the @bold[quantum-diagram] module
        @item: Writing custom transforms for the @bold[quantum-html] module

      The finished tutorial is available as a git repository @hyperlink(#)[here].

    @section Installing the dependencies
      First, let's create a package.json in a new directory and then install some
      the dependencies we'll need.

      The directory we'll use for this example will be called 'my-project':

      @codeblock bash
        mkdir my-project # creates project directory
        cd my-project    # change to the my-project directory
        npm init         # initialize npm and create a package.json

      Now the project has been initialized, the dependencies need to be installed.
      For now we will install just a few of the quantum modules available:

      @codeblock bash
        npm install -g quantum-cli
        npm install --save quantum-html quantum-docs

      Quantum makes extensive use of Promises, as does this walkthrough. For this
      tutorial we are going to use @hyperlink(https://www.npmjs.com/package/bluebird)[bluebird] as
      our bluebird implementation.

      It can be installed using the following command:

      @codeblock bash
        npm install --save bluebird


    @section Preparing the site structure

      The directory structure for quantum is flexible - you can choose how you
      lay out your files. For this tutorial we are going to show an example
      folder structure that works well in most cases.

      To prepare our example structure, we can make a few directories inside
      @code(bash)[my-project]:

      @@codeblock bash
        mkdir pages shared resources

      This should leave you with a structure as follows:

      @@codeblock bash
        - my-project
        | - pages         # The pages for the site. This will be the site root.
        | - shared        # Quantum content that is shared across multiple pages, such as templates or a common file.
        | - resources     # Any client-side JS/CSS.
        | - node_modules  # generated by npm install. See 'Installing the dependencies'
        | - package.json  # generated by npm init. See 'Installing the dependencies'

    @section Creating a build script
      We are going to use the quantum-hub module for building our site - this
      module simplifies setting up things like watching the source for changes,
      and runs a web server that reloads automatically when files are saved.

      The first step is to create the config file in the build folder called
      quantum.config.js:

      @subsection quantum.config.js
        @codeblock js
          var path = require('path')
          var html = require('quantum-html')
          var docs = require('quantum-docs')
          var Promise = require('bluebird')

          var htmlOptions = {
            transforms: {
              html: html.transforms,
              docs: docs()
            }
          }

          // returns a function that compiles a page out to html
          function pipeline () {
            return function (obj) {
              return Promise.resolve(obj)
                .then(html(htmlOptions))
                .then(html.stringify())
            }
          }

          module.exports = {
            pipeline: pipeline,
            pages: 'pages/**/*.um',
            base: 'pages',
            resourceDir: 'resources'
          }


    @section Create some test content

      Next, we can check that everything has been set up correctly. To do this,
      we need some example content. Create a file called index.um in the pages
      folder:

      @subsection pages/index.um
        @@codeblock um
          @h1: Example page
          @p: Omgasdfghjkl, it actually worked!

    @section Build the site

      Now run the build script:

      @codeblock bash
        quantum watch

      If all has gone well you should see something logged out to the console to
      indicate that the page was built and a web server was started.
      Visit @hyperlink(http://localhost:8000)[localhost:8000] in your browser to
      see the site that has been built

      @notice Note [info]
        If you get an error, check back through the tutorial for steps that were
        accidently skipped, or miscopied code snippets.

        If you believe you have done everything correctly, then you can seek help
        on the issue tracker in github for this project.

    @section Install and build Hexagon.js
      @notice TODO
        Improve this section - use the build in dest?

      Next, we can install @hyperlink(https://hexagonjs.io)[Hexagon.js]. We are
      going to use it mainly for its stylesheet.

      Hexagon.js is available as a node module which can be installed using:

      @codeblock bash
        npm install --save hexagon-js

      @sheet
        A build script can then be created:

      @bold: build/hexagon.js
      @codeblock js
        var hexagon = require('hexagon-js')

        hexagon.light.build({
          dest: 'resources/hexagon-js'
        })

      @sheet
        This can then be run using the following command to create a build
        of hexagon in the resources folder:

      @codeblock bash
        node build/hexagon.js

      @sheet
        This will need to be run whenever the hexagon build config is changed
        or a new version of hexagon is installed.

  @topic Adding Content
    @section Creating the titlebar template
      @sheet
        Before adding content to the page, it's best to define common templates
        to use for the pages.

        The first step for using templates is installing @code(um)[quantum-template]:

      @codeblock bash
        npm install --save quantum-template

      @sheet
        Then add the script to build/build.js to include template in the build process:

      @codeblock js
        // Add this to the top of the page, alongside the other require statements
        var template = require('template')

        ...

        return Promise.resolve(obj)
          .then(template()) // Add this line to the build pipeline, this includes the template functionality.
          .map(html(htmlOptions))
          .map(html.stringify())

        ...

      @sheet
        Templates can then be created using @(@define).

        In this walkthrough, we only need one template for the titlebar:

      @bold: shared/shared.um
      @@codeblock um
        \# Include the Hexagon library on all pages that include this file.
        @stylesheet [/resources/hexagon-js/hexagon.css]
        @script [/resources/hexagon-js/hexagon.js]

        \# Define the @titlebar entity
        @define titlebar
          \# Apply the 'hx-heading-fixed' class to the body
          @bodyClass hx-heading-fixed
          \# Add a div to the page with the hx-heading class
          @div .hx-heading
            @div .hx-titlebar
              @div .hx-titlebar-container
                @div .hx-titlebar-header
                  @a .hx-titlebar-icon
                    @attr href: /
                    \# Add the site logo
                    @image /resources/coffee.png
                  \# Add the header text
                  @div .hx-titlebar-title: BeverageInc.

      @sheet
        The template uses the following site logo, which should be copied to the site:

      @bold: resources/coffee.png

      @image /resources/coffee.png


    @section Creating a home page
      @sheet
        The next step is to create the home page for the site using the template you just created

      @bold: pages/index.um
      @@codeblock um
        \# Include the shared file
        @inline ../shared/shared.um

        \# Add the titlebar from the template created in the previous step
        @titlebar

        @topSection
          @breadcrumb
            @item /: Home
          @title Making Tea and Coffee
          @description: An api for making tea and coffee using Javascript

        @contentSection
          @topic About
            @sheet
              This api has broken the digital wall and provides the functionality to make real tea and coffee using Javascript.

        @bottomSection

      @sheet
        Content can be added easily in this way by adding more pages and folders as required.

  @topic Using quantum-api
    @section Installing the dependency
      @sheet
        The first step to add the api is to install the dependency:

      @codeblock bash
        npm install --save quantum-api

      @sheet
        Then add the script to build/build.js to include api in the build process:

      @codeblock js
        // Add this to the top of the page, alongside the other require statements
        var api = require('api')

        ...

        var htmlOptions = {
          transforms: {
            html: html.transforms,
            docs: docs(),
            api: api() // Add the api renderers
          }
        }

        ...

      @sheet
        The api can then be added as a new topic in the contentSection. For this
        walkthrough, we'll document the ficticious 'tea' function:

      @codeblock js
        function tea (options) {
          if(options === undefined) { options = {} }
          if(options.sugar === undefined) { options.sugar = 0 }
          if(options.milk === undefined) { options.milk = true }

          ...// Make tea
        }

    @section Adding the basic api
      @sheet
        The next step is to add the documentation for the tea function as a topic below the 'About' section:

      @@codeblock um
        @topic About
          ...

        \# The api section
        @topic Api
          \# Define the api content area
          @api
            @function tea
              @description: A function for making cups of tea
              @param? options [Object]: The options to use when making a cup of tea
                @property sugar [Number]: The number of sugars to add
                  @default: 0
                @property milk [String]: A string indicating the type of milk to use, can be 'skimmed' or 'full-cream'
                  @default: 'skimmed'



    @section Adding versioning to the api
      @sheet
        It is a realtively simple process that allows an incrementally versioned api to be created.

        The first step is to install the quantum-version dependency and add the relevant build scripts:

      @codeblock bash
        npm install --save quantum-version

      @sheet
        Then add the script to build/build.js to include template in the build process:

      @bold: build/build.js
      @codeblock js
        // Add this to the top of the page, alongside the other require statements
        var version = require('version')

        ...

        return Promise.resolve(obj)
          .then(template())
          .then(version()) // Add this line to the build pipeline, this includes the version functionality.
          .map(html(htmlOptions))
          .map(html.stringify())

        ...

      @sheet
        Versions can then be defined in the content. For this example, we'll add
        versioning to the api by adding the 'coffee' function, as well as making
        some changes to the 'tea' function.

        Start by adding a @(@versionList) to the top of the file:

      @bold: pages/index.um
      @@codeblock um
        @versionList
          @version 1.0.0
          @version 2.0.0
          @version 3.0.0

      @sheet
        The versions that will be used should be defined before adding the versioning
        otherwise quantum-version will not version any content. For example, if you
        were to add content for version 1.1.0, "@(@version 1.1.0)" should be added to
        the version list.

        Now we've set up the file ready for 3 versions, we'll add some versioned content.

      @bold: pages/index.um
      @@codeblock um
        @topic Api
          \# Define version 1.0.0
          @version 1.0.0
            @api
              @function tea
                @added: Added the tea function in this version
                @description: A function for making cups of tea
                @param? options [Object]: The options to use when making a cup of tea
                  @property sugars [Number]: The number of sugars to add
                    @default: 0
                  @property milk [String]: A string indicating the type of milk to use, can be 'skimmed' or 'full-cream'
                    @default: 'skimmed'

          \# Define version 2.0.0
          @version 2.0.0
            @api
              @function tea
                @param? options [Object]
                  @property sugars [Number]
                  @property type [String]: The type of teabag to use, can be 'english-breakfast', 'earl-grey' or 'green'
                    @default: 'english-breakfast'

              @function coffee
                @description: A function for making cups of coffee
                @param? options [Object]: The options to use when making a cup of coffee
                  @property sugars [Number]: The number of sugars to add
                    @default: 0
                  @property milk [String]: A string indicating the type of milk to use, can be 'skimmed' or 'full-cream'
                    @default: 'skimmed'

          \# Define version 3.0.0
          @version 3.0.0
            @api
              @function coffee
                @param? options [Object]
                  @property type [String]: The type of teabag to use, can be 'capuccino', 'americano' or 'latte'
                    @default: 'americano'
                    @added: Added the type option to the coffee function

      @sheet
        This provides us wth a versioned api. To switch between versions, the
        following needs to be added to the titlebar template, alongside the title:

      @bold: shared/shared.um
      @@codeblock um
        @div .hx-titlebar-title: BeverageInc.
        \# New content
        @div .hx-section
        @versionSelector: @versionList

      @sheet
        A version dropdown will now be available on the right hand side of the titlebar.
        Navigating to '/' will show the latest version, with each version available under
        '/x.0.0/'.

    @section Result
      @sheet
        At the end of this section, the home page and build structure should look like this:

      @bold: build/build.js
      @codeblock js
        var path = require('path')
        var html = require('quantum-html')
        var docs = require('quantum-docs')
        var hub = require('quantum-hub')
        var api = require('quantum-api')
        var template = require('quantum-template')
        var version = require('quantum-version')
        var Promise = require('bluebird') // Promise Polyfill

        function pipeline () {
          var htmlOptions = {
            transforms: {
              html: html.transforms,
              docs: docs(),
              api: api()
            }
          }

          // returns a function that compiles a page out to html
          return function (obj) {
            return Promise.resolve(obj)
              .then(template())
              .then(version())
              .map(html(htmlOptions))
              .map(html.stringify())
          }
        }

        hub.client.watch({
          pipeline: pipeline,
          port: 5555,
          config: {
            pages: 'pages/**/*.um',
            base: 'pages'
          },
          resourceDir: path.join(__dirname, '..', 'content', 'resources')
        })


      @bold: pages/index.um
      @@codeblock um
        @inline ../shared/shared.um

        @titlebar

        @topSection
          @breadcrumb
            @item /: Home
          @title Making Tea and Coffee
          @description: An api for making tea and coffee using Javascript

  @versionList
    @version 1.0.0
    @version 2.0.0
    @version 3.0.0

  @topic Using quantum-changelog
    @section About
      @sheet
        This api has broken the digital wall and provides the functionality to make real tea and coffee using Javascript.

    @section Api
      @version 1.0.0
        @api
          @function tea
            @added: Added the tea function in this version
            @description: A function for making cups of tea
            @param? options [Object]: The options to use when making a cup of tea
              @property sugars [Number]: The number of sugars to add
                @default: 0
              @property milk [String]: A string indicating the type of milk to use, can be 'skimmed' or 'full-cream'
                @default: 'skimmed'

      @version 2.0.0
        @api
          @function tea
            @param? options [Object]
              @property sugars [Number]
              @property type [String]: The type of teabag to use, can be 'english-breakfast', 'earl-grey' or 'green'
                @default: 'english-breakfast'

          @function coffee
            @description: A function for making cups of coffee
            @param? options [Object]: The options to use when making a cup of coffee
              @property sugars [Number]: The number of sugars to add
                @default: 0
              @property milk [String]: A string indicating the type of milk to use, can be 'skimmed' or 'full-cream'
                @default: 'skimmed'

      @version 3.0.0
        @api
          @function coffee
            @param? options [Object]
              @property type [String]: The type of teabag to use, can be 'capuccino', 'americano' or 'latte'
                @default: 'americano'
                @added: Added the type option to the coffee function

    @section Installing the dependency
      @sheet
        Creating a changelog using versioned api content is an easy process.

        The first step is to install the quantum-changelog dependency and add the relevant build scripts:

      @codeblock bash
        npm install --save quantum-changelog

      @sheet
        Then add the script to build/build.js to include template in the build process:

      @bold: build/build.js
      @codeblock js
        // Add this to the top of the page, alongside the other require statements
        var changelog = require('changelog')

        ...

          var htmlOptions = {
            transforms: {
              html: html.transforms,
              docs: docs(),
              api: api(),
              changelog: changelog.transforms() // Add the changelog transforms
            }
          }

        ...

        ...

        return Promise.resolve(obj)
          .then(template())
          .then(changelog()) // Add this line to the build pipeline, this includes the changelog functionality.
          .then(version())
          .map(html(htmlOptions))
          .map(html.stringify())

        ...

      @sheet
        Once the changelog has been installed and added to the build script, the
        next step is to create the changelog page



    @section Adding the changelog page
      @sheet
        First, create a link on the home page to the changelog at the bottom of the api section:

      @bold: pages/index.um
      @@codeblock um
        @a .hx-btn.hx-action: Changelog
          @attr href: changelog.html

      @sheet
        Then create the page with content:

      @bold: pages/changelog.um
      @@codeblock um
        @inline ../shared/shared.um

        @titlebar

        @topSection
          @breadcrumb
            @item /: Home
            \# Add the crumbtrail link for the changelog
            @item /changelog.html: Changelog
          @title Changelog
          @description: An api for making tea and coffee using Javascript

        @contentSection
          @topic Changes
            \# define the entity to place the changelog inside.
            @changelog.wrapper
              @process
                \# Inline the pages with api content that you wish to use
                @inline index.um

                \# If there is only one api, it will be rendered in a more readable manner using this option
                @renderSingleItemInRoot

              @version 1.0.0
                \# Descriptions can be added to each version but are not required
                @description: Added the initial version of the tea function.

              @version 2.0.0
              @version 3.0.0

          \# Add a key to the page, illustrating what each of the icons means
          @topic Key
            @changelog.key

      @sheet
        This will process all the @(@version) entities found in index.um and generate
        a versioned changelog, along with a key illustrating what each of the icons means.

  @topic Using quantum-diagram

    @section Installing the dependency
      @sheet
        The first step is to install the quantum-diagram dependency and add the relevant build scripts:

      @codeblock bash
        npm install --save quantum-diagram

      @sheet
        Then add the script to build/build.js to include template in the build process:

      @bold: build/build.js
      @codeblock js
        // Add this to the top of the page, alongside the other require statements
        var diagram = require('diagram')

        ...

          var htmlOptions = {
            transforms: {
              html: html.transforms,
              docs: docs(),
              api: api(),
              changelog: changelog.transforms(),
              diagram: diagram() // Add the diagram transforms
            }
          }

        ...

      @sheet
        Once quantum-diagram has been installed and added to the build script, the
        next step is to create the flow diagram page


    @section Adding the flow diagram page
      @sheet
        This part of the walkthrough follows the process of defining a diagram
        using the @code(um)[@diagram] entity. The final diagram will display the
        system behind our fictitious "rest api for ordering hot drinks".

        The first step is to create a new page for the flow diagram:

      @bold: pages/flow-diagram.um
      @@codeblock um
        ...

        @titlebar

        @topSection
          @breadcrumb
            @item /: Home
            # Add the crumbtrail link for the flow diagram
            @item /flow-diagram.html: Flow Diagram
          @title Flow Diagram
          @description: A diagram showing the flow of the beverage api.

        @contentSection

      @sheet
        Then we add a link to the flow diagram page on the home page after the changelog button:

      @bold: pages/index.um
      @@codeblock um
        ...

        @a .hx-btn.hx-action: Changelog
          @attr href: changelog.html

        @a .hx-btn.hx-action: Flow Diagram
          @attr href: flow-diagram.html


    @section Creating the flow diagram
      @sheet
        We now have somewhere to start making a diagram.

        We'll walk through each of the steps for creating a diagram to show what's
        going on. First, we create our user:

      @diagram
        @item user [User]

      @@codeblock um
        @diagram
          @item user [User]

      @sheet
        This user either makes a request to the tea or the coffee function so we add those as well

      @diagram
        @item user [User]

        @item tea [tea(options)]
        @item coffee [coffee(options)]

      @@codeblock um
        @diagram
          @item user [User]

          @item tea [tea(options)]
          @item coffee [coffee(options)]

    @section Linking Items

      @sheet
        Now we want to define a link between these items, to indicate that the user makes requests to the rest api:

      @diagram
        @item user [User]

        @item tea [tea(options)]
        @item coffee [coffee(options)]

        @link user -> tea
        @link user -> coffee

      @@codeblock um
        @diagram
          @item user [User]

          @item tea [tea(options)]
          @item coffee [coffee(options)]

          @link user -> tea
          @link user -> coffee

      @sheet
        But there is more to the imaginary api than meets the eye, of course. Lets add in some more components that describe how the system works in more detail:

      @diagram
        @item user [User]

        @item tea [tea(options)]
        @item tea-select-type [Select Type]
        @item tea-add-milk [Add Milk]
        @item tea-add-sugar [Add Sugar]

        @item coffee [coffee(options)]
        @item coffee-select-type [Select Type]
        @item coffee-add-milk [Add Milk]
        @item coffee-add-sugar [Add Sugar]

        @item return-beverage [Return Beverage]

        @link user -> tea
        @link user -> coffee

        @link tea -> tea-select-type
        @link tea-select-type -> tea-add-milk
        @link tea-add-milk -> tea-add-sugar
        @link tea-add-sugar -> return-beverage

        @link coffee -> coffee-select-type
        @link coffee-select-type -> coffee-add-milk
        @link coffee-add-milk -> coffee-add-sugar
        @link coffee-add-sugar -> return-beverage


      @@codeblock um
        @diagram
          @item user [User]

          @item tea [tea(options)]
          @item tea-select-type [Select Type]
          @item tea-add-milk [Add Milk]
          @item tea-add-sugar [Add Sugar]

          @item coffee [coffee(options)]
          @item coffee-select-type [Select Type]
          @item coffee-add-milk [Add Milk]
          @item coffee-add-sugar [Add Sugar]

          @item return-beverage [Return Beverage]

          @link user -> tea
          @link user -> coffee

          @link tea -> tea-select-type
          @link tea-select-type -> tea-add-milk
          @link tea-add-milk -> tea-add-sugar
          @link tea-add-sugar -> return-beverage

          @link coffee -> coffee-select-type
          @link coffee-select-type -> coffee-add-milk
          @link coffee-add-milk -> coffee-add-sugar
          @link coffee-add-sugar -> return-beverage


      @notice Note [info]
        Note that here, the @code(um)[@item] entity takes two parameters - an id and a visible name. The words "@code(um)[Api Request]" are surrounded by square brackets so that together they are treated as the second parameter. Without the square brackets the text "@code(um)[request Api Request]" would be treated as 3 separate parameters.

      @sheet
        It looks like there is a lot more going on here, but really it is more of the same - defining items and links between those items.

    @section Creating Groups

      @sheet
        What if we want to indicate that selecting the type, adding milk and adding sugar is part of the tea/coffee function? The @code(um)[@group] entity groups together items, and draws a rectangle around them:

      @diagram
        @item user [User]

        @group Make Tea
          @item tea [tea(options)]
          @item tea-select-type [Select Type]
          @item tea-add-milk [Add Milk]
          @item tea-add-sugar [Add Sugar]

        @group Make Coffee
          @item coffee [coffee(options)]
          @item coffee-select-type [Select Type]
          @item coffee-add-milk [Add Milk]
          @item coffee-add-sugar [Add Sugar]

        @item return-beverage [Return Beverage]

        @link user -> tea
        @link user -> coffee

        @link tea -> tea-select-type
        @link tea-select-type -> tea-add-milk
        @link tea-add-milk -> tea-add-sugar
        @link tea-add-sugar -> return-beverage

        @link coffee -> coffee-select-type
        @link coffee-select-type -> coffee-add-milk
        @link coffee-add-milk -> coffee-add-sugar
        @link coffee-add-sugar -> return-beverage

      @@codeblock um
        @diagram
          @item user [User]

          @group Make Tea
            @item tea [tea(options)]
            @item tea-select-type [Select Type]
            @item tea-add-milk [Add Milk]
            @item tea-add-sugar [Add Sugar]

          @group Make Coffee
            @item coffee [coffee(options)]
            @item coffee-select-type [Select Type]
            @item coffee-add-milk [Add Milk]
            @item coffee-add-sugar [Add Sugar]

          @item return-beverage [Return Beverage]

          @link user -> tea
          @link user -> coffee

          @link tea -> tea-select-type
          @link tea-select-type -> tea-add-milk
          @link tea-add-milk -> tea-add-sugar
          @link tea-add-sugar -> return-beverage

          @link coffee -> coffee-select-type
          @link coffee-select-type -> coffee-add-milk
          @link coffee-add-milk -> coffee-add-sugar
          @link coffee-add-sugar -> return-beverage

      @sheet
        This makes the tea and coffee related steps into groups to add clarity to the diagram.

    @section Link Styles
      @sheet
        For this example, selecting the type, adding milk and adding sugar are all
        optional steps. We can use different link styles to indicate this fact.

        Below is a list of all the link styles that can be used:

        @@codeblock um
          -   # A line linking two items
          ->  # A line with an arrow pointing to the item on the right
          <-  # A line with an arrow pointing to the item on the left
          <-> # A line wth arrows on both ends

        In addition, all the above links can be made into dashed lines using two dashes
        instead of one, e.g. @code(um)[-->] instead of @code(um)[->]

        For this example, we'll use dashed lines to indicate optional steps:

      @diagram
        @item user [User]

        @group Make Tea
          @item tea [tea(options)]
          @item tea-select-type [Select Type]
          @item tea-add-milk [Add Milk]
          @item tea-add-sugar [Add Sugar]

        @group Make Coffee
          @item coffee [coffee(options)]
          @item coffee-select-type [Select Type]
          @item coffee-add-milk [Add Milk]
          @item coffee-add-sugar [Add Sugar]

        @item return-beverage [Return Beverage]

        @link user -> tea
        @link user -> coffee

        @link tea --> tea-select-type
        @link tea-select-type --> tea-add-milk
        @link tea-add-milk --> tea-add-sugar
        @link tea-add-sugar -> return-beverage

        @link coffee --> coffee-select-type
        @link coffee-select-type --> coffee-add-milk
        @link coffee-add-milk --> coffee-add-sugar
        @link coffee-add-sugar -> return-beverage

      @@codeblock um
        @diagram
          @item user [User]

          @group Make Tea
            @item tea [tea(options)]
            @item tea-select-type [Select Type]
            @item tea-add-milk [Add Milk]
            @item tea-add-sugar [Add Sugar]

          @group Make Coffee
            @item coffee [coffee(options)]
            @item coffee-select-type [Select Type]
            @item coffee-add-milk [Add Milk]
            @item coffee-add-sugar [Add Sugar]

          @item return-beverage [Return Beverage]

          @link user -> tea
          @link user -> coffee

          @link tea --> tea-select-type
          @link tea-select-type --> tea-add-milk
          @link tea-add-milk --> tea-add-sugar
          @link tea-add-sugar -> return-beverage

          @link coffee --> coffee-select-type
          @link coffee-select-type --> coffee-add-milk
          @link coffee-add-milk --> coffee-add-sugar
          @link coffee-add-sugar -> return-beverage

    @section Flow Diagram page
      @sheet
        Once you've completed this step of the walkthrough, the flow diagram page
        should look like this:

      @bold: pages/flow-diagram.um
      @@codeblock um
        ...

        @titlebar

        @topSection
          @breadcrumb
            @item /: Home
            # Add the crumbtrail link for the flow diagram
            @item /flow-diagram.html: Flow Diagram
          @title Flow Diagram
          @description: A diagram showing the flow of the beverage api.

        @contentSection
          @diagram
            @item user [User]

            @group Make Tea
              @item tea [tea(options)]
              @item tea-select-type [Select Type]
              @item tea-add-milk [Add Milk]
              @item tea-add-sugar [Add Sugar]

            @group Make Coffee
              @item coffee [coffee(options)]
              @item coffee-select-type [Select Type]
              @item coffee-add-milk [Add Milk]
              @item coffee-add-sugar [Add Sugar]

            @item return-beverage [Return Beverage]

            @link user -> tea
            @link user -> coffee

            @link tea --> tea-select-type
            @link tea-select-type --> tea-add-milk
            @link tea-add-milk --> tea-add-sugar
            @link tea-add-sugar -> return-beverage

            @link coffee --> coffee-select-type
            @link coffee-select-type --> coffee-add-milk
            @link coffee-add-milk --> coffee-add-sugar
            @link coffee-add-sugar -> return-beverage

@inline ../../templates/sidebar-page.um

@topSection
  @title The Markup Language
  @source [https://github.com/ocadotechnology/quantumjs/tree/master/docs/{{filename}}]: Edit Page
  @description
    This page explains the markup language and how it works

@contentSection
  @topic Language Overview
    Content is written using the quantum markup language. Here is an overview of
    the entire language:

    @@codeblock um
      # Comments start with a hash

      # The hash character can be escaped with \#

      # basic structure of an entity
      @type parameters: Content

      # Entities can contain multiple lines of text content
      @person parameter1 parameter2
        Name: Alejandro
        Age: 32

      # And can also have nested entites
      @person parameter1 parameter2
        @name: Alejandro
        @age: 32

      # Content may be mixed between entities and text
      @button
        @icon fa fa-add
        Click Me!

      # Entites can also use a more compact single line syntax
      # (when written like this they are called inline entites)
      @type(parameters)[Content]

      # Inline entities may be placed in the middle of text
      This line has an @bold[inline] entity

      # The above button example could also be written like this
      @button: @icon(fa fa-add) Click Me!

      # Parameters with spaces should be wrapped in [...]
      @person parameter1 [parameter2 with spaces]

      # Escaping the @ sign is done by wrapping it (and optionally
      # surrounding text) in @(...)
      @(your.name@ocado.com)

      # Nested content may be completely escaped by starting an entity with @@
      @@codeblock um
        # This content is treated as text. No entites are parsed when in @@ mode
        @person
          @name: Alejandro
          @age: 32

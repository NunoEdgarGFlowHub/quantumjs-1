@inline /templates/sidebar-page.um

@topSection
  @title Core Concepts
  @source [https://github.com/ocadotechnology/quantumjs/tree/master/docs/{{filename}}]: Edit Page
  @description
    This page explains some of the concepts used in quantumjs, including the pipeline,
    file transforms and entity html transforms.

@contentSection
  @topic The Pipeline

    One key feature that quantum has is the way in which it turns markup into
    html. It uses a chain of functions to apply various transforms to get the output
    in the right format before turning it into html. Taking this approach allows
    multiple useful features to be added on top of the basic markup language
    (versioning, automatic table of contents generation, templating logic and more).

    @label
      A typical pipeline for turning quantum markup into html

    @sheet
      @diagram
        @item markup [Read index.um]
        @item custom-transforms [Custom Transforms]
        @item html-to-dom [HTML]
        @item html [HTML Stringify]
        @item write [Write index.html]

        @link markup --> custom-transforms: Quantum AST
        @link custom-transforms --> html-to-dom: Quantum AST
        @link html-to-dom -> html: Quantum Virtual Dom
        @link html -> write: HTML String



  @topic File Transforms

    A @bold[file transform] lets you @bold[mess with the parsed AST] of an
    entire page before it is rendered out to HTML. A file transform is
    simply a function.

    Here is a file transform that does absolutely nothing:

    @codeblock js
      function identityTransform (page) {
        return page.clone()
      }

    A @bold[file transform] is a function that takes an object of the form
    @code(js)[{filename, content}] that returns an object also of the form
    @code(js)[{filename, content}].

    @code(js)[filename] is the name of the file that was read, @code(js)[content] is
    the parsed AST.

    @section File Transform Api
      @api
        #XXX: there should be a way of hiding the default group headers
        @group
          @function FileTransform
            @collapsible false
            @description
              A function that takes a page and returns a new page with a transformation
              applied. This transfomation can be anything - from converting quantum-ast
              to html, or a transformation that replaces variables in the markup with
              values from template.

            @extra
              @notice TODO: Add an example

            @param page [File]: The page to transform
            @returns [File/Array[File]]: The transformed page


    # @notice More details
    #   See the @hyperlink(/tutorials/custom-transforms)[Custom transforms] tutorial
    #   for how to create and use your own entity transforms.


  @topic Entities

    An entity looks like this in markup:

    @@codeblock um
      @type param1 param2: Content

    The @code(um)[@] denotes the start of a new entity.

    When parsed it looks like this:

    @@codeblock js
      {
        type: 'type',
        params: ['param1', 'param2'],
        content: ['Content']
      }

  @topic Entity Transforms

    @bold[Entity transforms] convert an entity from AST to virtual dom. An entity
    transform is just a function.

    Here's an example entity transform:

    @codeblock js
      function notice (selection, page) {
        return page.create('div').class('notice')
          .add(page.create('div').class('notice-header').text(selection.ps()))
          .add(page.create('div').class('notice-body').add(selection.cs()))
      }

    This would convert the following markup:

    @@codeblock um
      @notice Warning: There is something you should know

    into

    @@codeblock html
      <div class="notice">
        <div class="notice-header">Warning</div>
        <div class="notice-body">There is something you should know</div>
      </div>

    @section Entity Transform API
      @api entity-transforms
        @group
          @function EntityTransform
            @collapsible false
            @description
              A function that takes a @type[Selection] and converts it to a dom @type[Element]

            @param selection [Selection]
              @collapsible false
              @description
                The @type[Selection] to transform.

            @param transformer [Function]
              @collapsible false
              @description
                The transformer created in the @hyperlink(/docs/modules/quantum-html/#builddom)[buildDOM] function.

                It is bootstrapped to itself to allow children to be transformed.

              @extra
                @subsection Example
                  @@codeblock js
                    function customTransform (selection, transformer) {
                      return dom.create('div').class('custom-class')
                        // Transform the content of the selection
                        .add(selection.transform(transformer))
                    }

              @param selection [Selection]
                @description
                  The @type[Selection] to transform.

            @param? meta [Object]
              @collapsible false
              @description
                The meta object as defined in @hyperlink(/docs/modules/quantum-html/#builddom)[buildDOM] options. This should only be used in custom transforms.

    # @notice More details
    #   See the @hyperlink(/tutorials/custom-transforms)[Custom transforms] tutorial
    #   for how to create and use your own entity transforms.

    @topic The AST (abstract syntax tree)

      Parsing is the process of turning the markup text into objects that can be
      more easily manipulated. The quantum markup language is designed to be easy
      to work with once parsed.

      This is what the markup on the @hyperlink(/docs/markup/)[Markup] page looks
      like when parsed into AST.

      @notice [TODO]
        XXX: Add easy to read example
      # @codeblock json: @inline output.json

      @notice [Note]
        There are some helper apis for working with the parsed AST. See
        the @hyperlink(/docs/modules/quantum-js/#selection-api)[quantum-js] module
        docs for more information.


@footer

@inline ../../templates/sidebar-page.um

@topSection
  @title Core Concepts
  @source [https://github.com/ocadotechnology/quantumjs/tree/master/docs/{{filename}}]: Edit Page
  @description
    This page explains some of the concepts used in quantumjs, including the pipeline,
    pipeline transforms and entity html transforms.

@contentSection
  @siteSidebars
  @topic The Markup Language

    Content is written using the quantum markup language. Here is an overview
    of the language:

    @@codeblock um

      \# comments start with a hash

      \# basic structure of an entity
      @type parameters: Content

      \# Entities can contain multiple lines of text content:
      @person parameter1 parameter2
        Name: Alejandro
        Age: 32

      \# And can also have nested entites
      @person parameter1 parameter2
        @name: Alejandro
        @age: 32

      \# Content may be mixed between entities and text
      @button
        @icon fa fa-add
        Click Me!

      \# Entites can also use a more compact single line syntax (when
      \# written like this they are called inline entites):
      @type(parameters)[Content]

      \# Inline entites may be placed in the middle of text
      This line has an @bold[inline] entity

      \# The above button example could also be written like this
      @button: @icon(fa fa-add) Click Me!

      \# Parameters with spaces should be wrapped in [...]
      @person parameter1 [parameter2 with spaces]

      \# escaping the @ sign is done by wrapping it (and optionally
      \# surrounding text) in @(...)
      @(your.name@ocado.com)

      \# nested content may be completely escaped by starting an entity with @@
      @@codeblock um
        \# this content is treated as text. No entites are parsed when in @@ mode
        @person
          @name: Alejandro
          @age: 32

      \# The hash character can be escaped with \#

  @topic The AST (abstract syntax tree)

    Parsing is the process of turning the markup text into objects that can be
    more easily manulipated. The quantum markup language is designed to be easy
    to work with once parsed.

    This is what the above markup looks like when parsed into AST.

    @codeblock json
      @inline output.json

    @notice [Note]
      There are some helper apis for working with the parsed AST. See
      the @hyperlink(/api/quantum-js/#selection-api)[quantum-js] module docs
      for more information.

  @topic The Pipeline

    One key feature that quantum has is the way in which it turns markup into
    html. It uses a chain of functions to apply various transforms to get the output
    in the right format before turning it into html. Taking this approach allows
    multiple useful features to be added on top of the basic markup language
    (versioning, automatic table of contents generation, templating logic and more).

    @label
      A typical pipeline for turning quantum markup into html

    @sheet
      @diagram
        @item markup [Read index.um]
        @item custom-transforms [Custom Transforms]
        @item html-to-dom [HTML]
        @item html [HTML Stringify]
        @item write [Write index.html]

        @link markup --> custom-transforms: Quantum AST
        @link custom-transforms --> html-to-dom: Quantum AST
        @link html-to-dom -> html: Quantum Virtual Dom
        @link html -> write: HTML String



  @topic Page Transforms

    A @bold[page transform] lets you @bold[mess with the parsed AST] of an
    entire page before it is rendered out to HTML. A page transform is
    simply a function.

    Here is a page transform that does absolutely nothing:

    @codeblock js
      function identityTransform (page) {
        return page.clone()
      }

    A @bold[page transform] is a function that takes an object of the form
    @code(js)[{filename, content}] that returns an object also of the form
    @code(js)[{filename, content}].

    @code(js)[filename] is the name of the file that was read, @code(js)[content] is
    the parsed AST.

    @notice More details
      See the @hyperlink(tutorials/custom-transforms)[Custom transforms] tutorial
      for how to create and use your own pipline transforms.

  @topic Entities

    An entity looks like this in markup:

    @@codeblock um
      @type param1 param2: Content

    The @code(um)[@] denotes the start of a new entity.

    When parsed it looks like this:

    @@codeblock js
      {
        type: 'type',
        params: ['param1', 'param2'],
        content: ['Content']
      }

  @topic Entity Transforms

    @bold[Entity transforms] convert an entity from AST to virtual dom. An entity
    transform is just a function.

    Here's an example entity transform:

    @codeblock js
      function notice (selection, page) {
        return page.create('div').class('notice')
          .add(page.create('div').class('notice-header').text(selection.ps()))
          .add(page.create('div').class('notice-body').add(selection.cs()))
      }

    This would convert the following markup:

    @@codeblock um
      @notice Warning: There is something you should know

    into

    @@codeblock html
      <div class="notice">
        <div class="notice-header">Warning</div>
        <div class="notice-body">There is something you should know</div>
      </div>


    @notice More details
      See the @hyperlink(tutorials/custom-transforms)[Custom transforms] tutorial
      for how to create and use your own entity transforms.


@bottomSection
  @paginationButtons
    @previous /: Home
    @next /quick-start/: Quick Start

@footer

@inline /templates/sidebar-page.um

@topSection
  @title Core Concepts
  @source [https://github.com/ocadotechnology/quantumjs/tree/master/docs/{{filename}}]: Edit Page
  @description
    This file explains some of the concepts used in quantumjs, including the pipeline,
    file transforms and entity transforms.

@contentSection
  @tableOfContents Contents

  @topic The Pipeline
    One key feature that quantum has is the way in which it turns markup into
    html. It uses a chain of @type[FileTransform] functions to apply various
    transforms to get the output in the right format before turning it into
    html.

    Taking this approach allows multiple useful features to be added on top of
    the basic markup language (versioning, automatic table of contents
    generation, templating logic and more).

    @subsection A typical pipeline for turning quantum markup into html
      @diagram
        @item markup [Read index.um]
        @item custom-transforms [Custom Transforms]
        @item html-to-dom [HTML]
        @item html [HTML Stringify]
        @item write [Write index.html]

        @link markup --> custom-transforms: Quantum AST
        @link custom-transforms --> html-to-dom: Quantum AST
        @link html-to-dom -> html: Quantum Virtual Dom
        @link html -> write: HTML String


  @topic The AST (abstract syntax tree)
    Parsing is the process of turning the markup text into @type[Entity]
    AST objects that can be more easily manipulated.

    The quantum markup language is designed tobe easy to work with once parsed
    as well as provide the ability to use @type[EntityTransform] functions as
    well as @type[FileTransform] functions to manipulate the output of a page.

    A basic example of the AST for some Quantum markup can be seen below:

    @example
      @@um
        @type param1 param2
          @otherType: Content

      @output
        @@codeblock js
          {
            type: 'type',
            params: ['param1', 'param2'],
            content: [
              {
                type: 'otherType',
                params: [],
                content: ['Content']
              }
            ]
          }


    @notice [Note]
      There are some helper apis for working with the parsed AST.

      See the @hyperlink({{baseurl}}/docs/modules/quantum-core/#selection-api)[quantum-core]
      module docs for more information.


  @topic File Transforms
    A @bold[file transform] lets you @bold[alter the parsed AST] of an
    entire file before it is rendered out to HTML. A file transform is
    simply a function.

    Here is a file transform that does absolutely nothing:

    @codeblock js
      function identityTransform (file) {
        return file
      }

    A @bold[file transform] is a function that takes a @type[File], modifies it
    and returns the modified @type[File] (or an array of @type[File] objects)

    @section File Transform Api
      @api
        @group
          @function FileTransform
            @collapsible false
            @description
              A function that takes a file and returns a new file with a transformation
              applied. This transfomation can be anything - from converting quantum-ast
              to html, or a transformation that replaces variables in the markup with
              values from template.

            @extra
              @example
                @noOutput
                @@js
                  const path = require('path')

                  // The htmlRenamer from 'quantum-html'
                  // renames name.html to name/index.html and leaves index.html as it is
                  function htmlRenamer () {
                    return (file) => {
                      if (path.extname(file.info.dest) === '.html') {
                        const filenameWithoutExtension = path.basename(file.info.dest).replace('.html', '')
                        const rootPath = path.dirname(file.info.dest)
                        return file.clone({
                          info: file.info.clone({
                            dest: filenameWithoutExtension === 'index' ? file.info.dest : path.join(rootPath, filenameWithoutExtension, 'index.html')
                          })
                        })
                      } else {
                        return file
                      }
                    }
                  }

            @arg file [File]: The file to transform
            @returns [File/Array[File]]: The transformed file


    # @notice More details
    #   See the @hyperlink({{baseurl}}/tutorials/custom-transforms)[Custom entityTransforms] tutorial
    #   for how to create and use your own entity transforms.


  @topic Entities
    An entity looks like this in markup:

    @@codeblock um
      @type param1 param2: Content

    The @code(um)[@] denotes the start of a new entity.

    When parsed it looks like this:

    @@codeblock js
      {
        type: 'type',
        params: ['param1', 'param2'],
        content: ['Content']
      }


    @section Entity Objects
      An entity consists of entities with three properties, @code[type],
      @code[params] and @code[content]:
      @api entities
        @group
          @object Entity
            @collapsible false
            @property type [String]
              @description
                The @code[@] type of the entity, e.g for @code[@code] the type is
                @code['code'].

            @property params [Array[String]]
              @description
                The params for an entity

              @extra
                For the following entity:
                @@codeblock um
                  @type param1 param2

                The @code[params] is:
                @@codeblock js
                  ['param1', 'param2']

            @property content [Array[String/Entity]]
              @description
                The content of the current entity.

                It contains all the string content as well as the nested entities
                of the current entity.


  @topic Entity Transforms

    @bold[Entity transforms] convert an entity from AST to virtual dom. An entity
    transform is just a function.

    Here's an example entity transform:

    @codeblock js
      const dom = require('quantum-dom')
      function notice (selection, transformer) {
        return dom.create('div').class('notice')
          .add(dom.create('div').class('notice-header').text(selection.ps()))
          .add(dom.create('div').class('notice-body').add(selection.cs()))
      }

    This would convert the following markup:

    @@codeblock um
      @notice Warning: There is something you should know

    into

    @@codeblock html
      <div class="notice">
        <div class="notice-header">Warning</div>
        <div class="notice-body">There is something you should know</div>
      </div>

    @section Entity Transform API
      @api entity-transforms
        @group
          @function EntityTransform
            @collapsible false
            @description
              A function that takes a @type[Selection] and converts it to a dom @type[Element]

            @arg selection [Selection]
              @collapsible false
              @description
                The @type[Selection] to transform.

            @arg transformer [Function]
              @collapsible false
              @description
                The transformer created in the @hyperlink({{baseurl}}/docs/modules/quantum-html/#builddom)[buildDOM] function.

                It is bootstrapped to itself to allow children to be transformed.

              @extra
                @subsection Example
                  @@codeblock js
                    function customTransform (selection, transformer) {
                      return dom.create('div').class('custom-class')
                        // Transform the content of the selection
                        .add(selection.transform(transformer))
                    }

              @arg selection [Selection]
                @description
                  The @type[Selection] to transform.

            @arg? meta [Object]
              @collapsible false
              @description
                The meta object as defined in @hyperlink({{baseurl}}/docs/modules/quantum-html/#builddom)[buildDOM] options. This should only be used in custom entity transforms.

    # TODO: Convert this to a tutorial page with a more in-depth example
    @section Custom Entity Transform Example
      The following shows a full example of how to create a custom entity
      transform using the @code[quantum-dom] and @code[quantum-html] modules:

      @example
        @file custom.js
          @noOutput
          @@js
            const dom = require('quantum-dom')

            // creates a sign in block for the @signIn entity
            function signIn (selection) {
              return dom.create('div').class('sign-in')
                .add(dom.create('input').class('username-input'))
                .add(dom.create('input').class('password-input'))
                .add(dom.create('button').class('sign-in-button').text('Sign in'))
            }

            function entityTransforms () {
              return Object.freeze({
                signIn
              })
            }

            module.exports = {
              entityTransforms
            }

        @file quantum.config.js
          @noOutput
          @@js
            const custom = require('./custom.js')
            const html = require('quantum-html')

            const htmlOptions = {
              entityTransforms: {
                custom: custom.entityTransforms()
              }
            }

            module.exports = {
              pipeline: [
                html(htmlOptions)
              ],
              pages: 'index.um'
            }

        @file index.um
          @@um
            @signIn

          @output
            Calling @code[quantum build] would render the @code[index.um] page
            and output to @bold[target/index.html]
            @@codeblock html
              <!DOCTYPE html>
              <html>
              <head>
                <meta name="viewport" content="width=device-width, initial-scale=1"></meta>
              </head>
              <body class="qm-body-font">
                <!-- the result of the @signIn transform -->
                <div class="sign-in">
                  <input class="username-input"></input>
                  <input class="password-input"></input>
                  <button class="sign-in-button">Sign in</button>
                </div>
              </body>
              </html>

@footer

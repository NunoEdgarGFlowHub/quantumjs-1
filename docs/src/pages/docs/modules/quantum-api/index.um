@inline /templates/sidebar-page.um

@versionedPage
  @version 2.0.0

@topSection
  @title quantum-api
  @source [https://github.com/ocadotechnology/quantumjs/tree/master/docs/{{filename}}]: Edit Page
  @description
    Transforms for writing API documentation and building changelogs.

@contentSection
  @topic About
    This module provides entity transforms for writing the API documentation that you
    can see in the @hyperlink(/docs/modules/quantum-api/#api)[API] section of this
    and the other module pages.

    It also provides the ability to generate @hyperlink(#rendering-changelogs)[changelogs]
    from the api as well as @hyperlink(#versioning-apis)[versioned pages] when
    combined with @hyperlink(/docs/modules/quantum-version/)[quantum-version]

  @topic Example
    @example
      @file quantum.config.js
        @noOutput
        @@js
          const api = require('quantum-api')
          const html = require('quantum-html')

          const htmlOptions = {
            entityTransforms: {
              api: api.entityTransforms()
            }
          }

          module.exports = {
            pipeline: [
              html(htmlOptions)
            ],
            pages: 'index.um'
          }

      @file index.um
        @@um
          @api example-api
            @function makeCoffee
              @description
                A function for making coffee
              @arg sugar [Boolean]
                @description
                  Whether to add Sugar
              @arg milk [Boolean]
                @description
                  Whether to add milk

    @section Nesting content
      It is possible to nest most api entities for a language inside it, for
      instance a function @code[@arg] may be an object so could contain
      @code[@property] entities.

      @example
        @@um
          @api
            @function functionName
              @arg stringParma [String]
              @arg objectParam [Object]
                @property objectProp [Object]
                  @property anotherObjectProp [Object]
                    @description: And so on...

            @object objectName [Object]
              @property objectProp [Object]
                @property anotherObjectProp [Object]
                  @description: And so on...



  @topic Entities
    @inline entities.um

  @topic API
    @inline api.um

  @topic Using the module
    Below are several examples with the code required and their output.

    @section Standalone
      Using the module to provide the entity transforms provides basic api
      documentation capabilities:

      @example
        @file quantum.config.js
          @noOutput
          @js
            const html = require('quantum-html')
            const api = require('quantum-api')

            const apiOptions = {
              // Define api options here
            }

            const htmlOptions = {
              entityTransforms: {
                html: html.entityTransforms(),
                api: api.entityTransforms(apiOptions) // Add the api section renderers to the page
              }
            }

            module.exports = {
              pages: '*.um',
              pipeline: [
                html.fileTransform(htmlOptions)
              ]
            }
        @file
          @@um
            @function exampleFunction
              @description: Function description
              @arg param1 [String]: Parameter
              @arg? param1 [String]: Optional parameter

            @object exampleObject
              @description: Object description

    @section Rendering Changelogs
      @example
        @file quantum.config.js
          @js
            const html = require('quantum-html')
            const api = require('quantum-api')

            const apiOptions = {
              // Define api options here
            }

            const htmlOptions = {
              entityTransforms: {
                html: html.entityTransforms(),
                api: api.entityTransforms(apiOptions) // Add the api section renderers to the page
              }
            }

            module.exports = {
              pages: '*.um',
              pipeline: [
                api.fileTransform(apiOptions),
                html.fileTransform(htmlOptions)
              ]
            }

        @file path/index.um
          @@um
            @api moduleName
              @function exampleFunction
                @added 1.0.0
                @description: Function description
                @arg param1 [String]: Parameter
                @arg? param2 [String]: Optional parameter

              @object exampleObject
                @description
                  Object Description
                @added 2.0.0
                  @description
                    Added an example object

        @file path/changelog.um
          @@um
            @changelogList
              @groupByApi false
              @reverseVisibleList true
              @process
                @inline path/index.um
              @version 2.0.0
                @description: Version 2.0.0 changes
              @version 1.0.0
                @description: Version 1.0.0 changes

        @output
          @changelogList
            @groupByApi false
            @reverseVisibleList true
            @process
              @api moduleName
                @function exampleFunction
                  @added 1.0.0
                  @description: Function description
                  @arg param1 [String]: Parameter
                  @arg? param2 [String]: Optional parameter

                @object exampleObject
                  @description
                    Object Description
                  @added 2.0.0
                    @description
                      Added an example object

            @version 2.0.0
              @description: Version 2.0.0 changes
            @version 1.0.0
              @description: Version 1.0.0 changes

    @section Versioning APIs
      You can use the same versioned api to produce multiple versioned pages that
      show a single version.

      See @hyperlink(/docs/modules/quantum-version/)[quantum-version] for more
      information.

      @example
        @file quantum.config.js
          @js
            const version = require('quantum-version')
            const api = require('quantum-api')
            const html = require('quantum-html')

            const apiOptions = {
              // Define api options here
            }

            const htmlOptions = {
              entityTransforms: {
                html: html.entityTransforms(),
                api: api.entityTransforms(apiOptions) // Add the api section renderers to the page
              }
            }

            module.exports = {
              pages: '*.um',
              pipeline: [
                version.fileTransform(versionOptions), // Generate versioned pages (e.g. page/1.0.0/index.html)
                html.pageTransform(htmlOptions)
              ]
            }

        @file path/index.um
          @@um
            @versionedPage
              @version 1.0.0
              @version 2.0.0

            @api moduleName
              @function exampleFunction
                @added 1.0.0
                @description: Function description
                @arg param1 [String]: Parameter
                @arg? param2 [String]: Optional parameter

              @object exampleObject
                @description
                  Object Description
                @added 2.0.0
                  @description
                    Added an example object

        @output
          @div .docs-example-code-heading: target/1.0.0/index.html

          @function exampleFunction
            @added 2.0.0
            @description: Function description

            @arg param1 [String]: Parameter
            @arg? param2 [String]: Optional parameter


          @div .docs-example-code-heading: target/2.0.0/index.html

          @function exampleFunction
            @description: Function description
            @arg param1 [String]: Parameter
            @arg? param2 [String]: Optional parameter

          @object exampleObject
            @description
              Object Description
            @added 2.0.0
              @description
                Added an example object

          @div .docs-example-code-heading: target/index.html (same as target/2.0.0/index.html)

          @function exampleFunction
            @description: Function description
            @arg param1 [String]: Parameter
            @arg? param2 [String]: Optional parameter

          @object exampleObject
            @description
              Object Description
            @added 2.0.0
              @description
                Added an example object

    @section Creating a Custom Language
      To define a language to use with quantum api, you can build a custom
      language

      @example
        @file custom-language.js
          @noOutput
          @js
            @inline /transforms/custom-language.js

        @file quantum.config.js
          @noOutput
          @js
            const html = require('quantum-html')
            const api = require('quantum-api')
            const customLanguage = require('./custom-language.js')

            // Add the new language to the api options
            const apiOptions = {
              languages: [
                customLanguage()
              ]
            }

            // Add the api entity transforms to htmlTransforms if they weren't there already
            const htmlOptions = {
              entityTransforms: {
                api: api.entityTransforms(apiOptions)
              }
            }

            // Add the fileTransform for rendering changelog content
            module.exports = {
              pages: '**/*.um',
              pipeline: [
                api.fileTransform(apiOptions),
                html.fileTransform(htmlOptions)
              ]
            }


        @file custom-language.css
          @noOutput
          @css
            @inline /transforms/custom-language.css

        @file index.um
          @@um
            @custom something
              @added 1.0.0
                @description
                  Added something
              @description
                Description of something

              @thing thing1: Thing 1
              @thing thing2: Thing 2

      You can also render a changelog:

      @example
        @file changelog.um
          @@um
            @changelogList
              @process
                @inline index.um
              @version 1.0.0

          @output
            @changelogList
              @process
                @api myApi
                  @custom something
                    @added 1.0.0
                      @description
                        Added something
                    @description
                      Description of something

                    @thing thing1: Thing 1
                    @thing thing2: Thing 2
              @version 1.0.0

@inline /templates/sidebar-page.um

@versionList
  @version 1.0.0

@topSection
  @title quantum-dom
  @source [https://github.com/ocadotechnology/quantumjs/tree/master/docs/{{filename}}]: Edit Page
  @description
    A minimal virtual dom library used by quantum for building html pages.

@contentSection
  @topic About
    This is a minimal virtual dom library that is used when defining entity
    transforms which convert entities into snippets of html.

    The Quantum DOM library is primarily used when defining custom @type[EntityTransform]
    functions. It provides an api that allows creation of objects that represent
    @hyperlink(https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction)[elements]
    on a web page (for example a @code[<div>] or @code[<span>], or any other dom
    element).

  @topic Api
    @inline api.um

  @topic Examples
    The api allows creation of detached elements. Detached elements can be
    added to another as children to create small chunks of dom. Here are some
    examples of how to use the api:

    @@codeblock js
      const dom = require('quantum-dom')

      // Creates a <div></div> element
      dom.create('div')

      // Creates a <div id="my-id"></div> element
      dom.create('div').id('my-id')

      // Creates a <a href="/link/to/somewhere">Link</a> element
      dom.create('a').attr('href', '/link-to-somewhere').text('Link')

      // Creates a <span class="my-class"></span> element
      dom.create('span').class('my-class')

      // Creates an element that will render out to <h1>My Header</h1>
      dom.create('h1').text('My Header')

      /*
        Creates the following dom structure:

        <div class="outer-div">
          <div class="inner-div"></div>
        </div>
      */
      dom.create('div').class('outer-div')
        .add(dom.create('div').class('inner-div'))

  @topic More info

    When a page is rendered with quantum, a virtual dom page is built up as the
    source file for the page is processed. Once done, the virtual dom is rendererd
    out to a HTML string and written to a file. This two phase process allows each
    entity transform to be a @hyperlink(https://en.wikipedia.org/wiki/Pure_function)[pure function],
    which has nice properties for caching and speeding up builds.

    See @hyperlink(/docs/core-concepts/#entity-transforms)[Core Concepts - Entity Transforms]
    for more information.

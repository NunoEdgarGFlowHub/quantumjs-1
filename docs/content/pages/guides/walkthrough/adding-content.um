@inline ../../../shared/shared.um

@titlebar
@author Charlie Frater
@author James Smyth
@date 12/01/2016

@topSection
  @breadcrumb
    @item /: Home
    @item /guides/: Guides
    @item /guides/walkthrough/: Walkthrough
    @item /guides/walkthrough/adding-content/: Adding Content
  @title Adding Content
  @description
    This section of the walkthrough covers the addition of content to the site to document a ficticious company called 'BeverageInc' and their tea / coffee making api.


@contentSection

  # Move onto versioning

  # install version
  # add version to build script

  # add version tags / versioned content
  # add @versionSelector: @versionList to shared

  # add coffee function to api
  # update tea options

  # move onto changelog

  # install changelog
  # add changelog to build script

  # move api to /shared/api

  # add changelog to page
  # populate


  @topic Adding content to the site
    @section Install and build Hexagon.js
      @sheet
        In this section, we use @hyperlink(https://hexagonjs.io)[Hexagon.js] as it
        provides a good framework for building content.

        Hexagon.js is available as a node module which can be installed using:

      @code bash
        npm install --save hexagon-js

      @sheet
        A build script can then be created:

      @bold: build/hexagon.js
      @codeblock js
        var hexagon = require('hexagon-js')

        hexagon.light.build({
          dest: 'content/resources/hexagon-js'
        })

      @sheet
        This can then be run using the following command to create a build
        of hexagon in the resources folder:

      @codeblock bash
        node build/hexagon.js

      @sheet
        This will need to be run whenever the hexagon build config is changed
        or a new version of hexagon is installed.

    @section Creating the titlebar template
      @sheet
        Before adding content to the page, it's best to define common templates
        to use for the pages.

        The first step for using templates is installing @code(um)[quantum-template]:

      @codeblock bash
        npm install --save quantum-template

      @sheet
        Then add the script to build/build.js to include template in the build process:

      @codeblock js
        // Add this to the top of the page, alongside the other require statements
        var template = require('template')

        ...

        return Promise.resolve(obj)
          .then(template()) // Add this line to the build pipeline, this includes the template functionality.
          .map(html(htmlOptions))
          .map(html.stringify())

        ...

      @sheet
        Templates can then be created using @(@define).

        In this walkthrough, we only need one template for the titlebar:

      @bold: shared/shared.um
      @@codeblock um
        \# Include the Hexagon library on all pages that include this file.
        @stylesheet [/resources/hexagon-js/hexagon.css]
        @script [/resources/hexagon-js/hexagon.js]

        \# Define the @titlebar entity
        @define titlebar
          \# Apply the 'hx-heading-fixed' class to the body
          @bodyClass hx-heading-fixed
          \# Add a div to the page with the hx-heading class
          @div .hx-heading
            @div .hx-titlebar
              @div .hx-titlebar-container
                @div .hx-titlebar-header
                  @a .hx-titlebar-icon
                    @attr href: /
                    \# Add the site logo
                    @image /resources/coffee.png
                  \# Add the header text
                  @div .hx-titlebar-title: BeverageInc.

      @sheet
        The template uses the following site logo, which should be copied to the site:

      @bold: content/resources/coffee.png

      @image /resources/coffee.png


    @section Creating a home page
      @sheet
        The next step is to create the home page for the site.

      @bold: content/pages/index.um
      @@codeblock um
        \# Include the shared file
        @inline ../shared/shared.um

        \# Add the titlebar from the template created in the previous step
        @titlebar

        @topSection
          @breadcrumb
            @item /: Home
          @title Making Tea and Coffee
          @description: An api for making tea and coffee using Javascript

        @contentSection
          @topic About
            @sheet
              This api has broken the digital wall and provides the functionality to make real tea and coffee using Javascript.

  @topic Adding the api
    @sheet
      The first step to add the api is to install the dependency:

    @codeblock bash
      npm install --save quantum-api

    @sheet
      Then add the script to build/build.js to include api in the build process:

    @codeblock js
      // Add this to the top of the page, alongside the other require statements
      var api = require('api')

      ...

      var htmlOptions = {
        transforms: {
          html: html.transforms,
          docs: docs(),
          api: api() // Add the api renderers
        }
      }

      ...

    @sheet
      The api can then be added as a new topic in the contentSection. For this
      walkthrough, we'll document the tea function:

    @@codeblock um
      @topic About
        ...

      \# The api section
      @topic Api
        \# Define the api content area
        @api
          @function tea
            @description: A function for making cups of tea
            @param? options [Object]: The options to use when making a cup of tea
              @property sugar [Number]: The number of sugars to add
                @default: 0
              @property milk [String/Boolean]: A string indicating the type of milk to use, can be 'skimmed', 'semi-skimmed' or 'full-cream'
                @default: true


  @topic Adding versioning to the api
    @sheet
      Again, the first step for adding versioned content is to install the dependency:

    @codeblock bash
      npm install --save quantum-version

    @sheet
      Then add the script to build/build.js to include template in the build process:

    @codeblock js
      // Add this to the top of the page, alongside the other require statements
      var version = require('version')

      ...

      return Promise.resolve(obj)
        .then(template())
        .then(version()) // Add this line to the build pipeline, this includes the version functionality.
        .map(html(htmlOptions))
        .map(html.stringify())

      ...

    @sheet
      Versions can then be defined in the content. For this example, we'll add
      versioning to the api by adding the 'coffee' function, as well as making
      some changes to the 'tea' function.

      Start by adding a @(@versionList) to the top of the file:

    @@codeblock um
      @versionList
        @version 1.0.0
        @version 2.0.0
        @version 3.0.0

    @sheet
      The versions that will be used should be defined before adding the versioning
      otherwise quantum-version will not version any content. For example, if you
      were to add content for version 1.1.0, "@(@version 1.1.0)" should be added to
      the version list.

      Now we've set up the file ready for 3 versions, we'll add some versioned content.

    @@codeblock um
      @topic Api
        \# Define version 1.0.0
        @version 1.0.0
          @api
            @function tea
              @added: Added the tea function in this version
              @description: A function for making cups of tea
              @param? options [Object]: The options to use when making a cup of tea
                @property sugars [Number]: The number of sugars to add
                  @default: 0
                @property milk [String/Boolean]: A string indicating the type of milk to use, can be 'skimmed', 'semi-skimmed' or 'full-cream'
                  @default: true

        \# Define version 2.0.0
        @version 2.0.0
          @api
            @function tea
              @param? options [Object]
                @property sugars [Number]
                @property type [String]: The type of teabag to use, can be 'english-breakfast', 'earl-grey' or 'green'
                  @default: 'english-breakfast'

            @function coffee
              @description: A function for making cups of coffee
              @param? options [Object]: The options to use when making a cup of coffee
                @property sugars [Number]: The number of sugars to add
                  @default: 0
                @property milk [String/Boolean]: A string indicating the type of milk to use, can be 'skimmed', 'semi-skimmed' or 'full-cream'
                  @default: true

        \# Define version 3.0.0
        @version 3.0.0
          @api
            @function coffee
              @param? options [Object]
                @property type [String]: The type of teabag to use, can be 'capuccino', 'americano' or 'latte'
                  @default: 'americano'
                  @added: Added the type option to the coffee function

    @sheet
      This provides us wth a versioned api. To switch between versions, the
      following needs to be added to the titlebar template:

    @@codeblock um
      @div .hx-titlebar-title: BeverageInc.
      \# New content
      @div .hx-section
      @versionSelector: @versionList

    @sheet
      A version dropdown will now be available on the right hand side of the titlebar.
      Navigating to '/' will show the latest version, with each version available under
      '/x.0.0/'.


  @topic Adding a changelog
    @sheet
      TODO

@bottomSection
  @paginationButtons
    @previous /guides/walkthrough/setting-up: Setting Up
    @next /guides/walkthrough/flow-diagram: Flow Diagram


@footer
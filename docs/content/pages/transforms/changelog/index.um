@inline ../../../shared/common.um
@quantum-titlebar Changelog

@qm.content
  @section

    @h1: Changelog

    @p: This module provides a set of transforms for creating a changelog as well as the @(@process) transform that allows the generation of a changelog from versioned content.
    @p: The changelog renderers work well with the @hyperlink(../version/)[version transform] and @hyperlink(../api/)[api transform] as the content is iterated upon in a similar method, showing the various tags available.

    @h1: Examples

    @p: Using the api renderers is simple - just add them to the html transforms:

    @@codeblock js
      var quantum = require('quantum-js')
      var changelog = require('quantum-changelog')
      var html = require('quantum-html')

      var changelogOptions = {
        // set changelog options here
      }

      var htmlTransforms = {
        html: html.transforms,
        changelog: changelog(changelogOptions).transforms // this is the bit that includes the changelog transforms
      }

      quantum.read('index.um')
        .map(changelog(changelogOptions)) // this is the bit that deals with @process entities
        .map(html(htmlTransforms))
        .map(html.stringify())
        .map(quantum.write('target'))

    @p: Example markup
    @codeblock um: @inline markup-example.um [text]

    @p: Example result
    @div .qm-card-background
      @inline markup-example.um

    @h1: Api

    @api
      @function api
        @description:
          @p: A function that returns a function for taking @(@changelog) entities and transforming them into virtual dom
          @p: This is the function returned from @code(js)[require('quantum-changelog')]
        @param? options [Object]
          @description
            @p: The options available for the changelog module are split into two categories.
          @group [Core Options]
            @description: Options used by most parts of the changelog.
            @property taggable [Array[String]]
              @description
                @p: The array of entities to look for tags within, including the element itself
              @default
                @codeblock js
                  [
                    'function',
                    'prototype',
                    'method',
                    'property',
                    'object',
                    'constructor',
                    'returns',
                    'event',
                    'data',
                    'class',
                    'extraclass',
                    'childclass'
                  ]

            @property indexable [Array[String]]
              @description
                @p: The array of entities to look for tags within, excluding the element itself, i.e., only looking within children of the entity.
              @default
                @codeblock js
                  [
                    'param',
                    'group'
                  ]

            @property milestoneUrl [String]
              @description
                @p: The string that @(@milestone) entities will use when linking to milestones (usually GitHub)
              @default ''

            @property issueUrl [String]
              @description
                @p: The string that @(@issue) entites will use when linking to issues (usually GitHub)
              @default ''

            @property tags [Object]
              @description:
                @p: The tags to look for when generating the changelog. Each key for this object is converted to an @(@key) entity.
                @p: A tag is defined as follows:
                @codeblock js
                  {
                    entityName: {
                      keyText: 'Entity Name',           // Formatted text to display in the @(@key)
                      iconClass: 'fa fa-fw fa-rocket',  // The class to give to the icon
                      order: 1                          // The sort order for the tag
                    }
                  }
                @p: Entries will be sorted within items based on the @code(js)[order] property for each tag

              @default
                @codeblock js
                  {
                    added: {
                      keyText: 'Added',
                      iconClass: 'fa fa-fw fa-plus',
                      order: 8
                    },
                    updated: {
                      keyText: 'Updated',
                      iconClass: 'fa fa-fw fa-level-up',
                      order: 7
                    },
                    deprecated: {
                      keyText: 'Deprecated',
                      iconClass: 'fa fa-fw fa-recycle',
                      order: 5
                    },
                    removed: {
                      keyText: 'Removed',
                      iconClass: 'fa fa-fw fa-times',
                      order: 4
                    },
                    enhancement: {
                      keyText: 'Enhancement',
                      iconClass: 'fa fa-fw fa-magic',
                      order: 6
                    },
                    bugfix: {
                      keyText: 'Bug Fix',
                      iconClass: 'fa fa-fw fa-bug',
                      order: 3
                    },
                    docs: {
                      keyText: 'Documentation',
                      iconClass: 'fa fa-fw fa-book',
                      order: 2
                    },
                    info: {
                      keyText: 'Information',
                      iconClass: 'fa fa-fw fa-info',
                      order: 1
                    }
                  }

          @group [Process Options]
            @description
              @p: These options will not affect content outside of a @(@process) entity.

            @property reverseVisibleList [Boolean]
              @description
                @p: Whether the list of versions produced by @(@process) should be reversed.
              @default false

            @property renderSingleItemInRoot [Boolean]
              @description
                @p: Whether a changelog with a single item in it should render all the entries in the root level element, i.e., without collapsing content.
              @default false

            @property dontAddDocsLink [Boolean]
              @description
                @p: Whether the items within an @(@process) entity should use the @code(js)[docsUrlLookup] to generate a link for the item.
                @p: This can also be defined on a per-changelog basis using the @(@dontAddDocsLink) entity.
              @default false

            @property docsUrlLookup [Function]
              @description:
                @p: The function for looking up the docs url when using @(@process)
              @param version [String]: The current version
              @param apiName [String]: The name of the current @(@api) entity
              @default
                @codeblock js
                  function defaultDocsUrlLookup (version, apiName) {
                    return {
                      link: path.join('/', 'docs', version, apiName.split(' ').join('-').toLowerCase()),
                      text: 'Docs'
                    }
                  }
              @returns Object
                @property link [String]: The url for the docs link
                @property text [String]: The text for the docs link

            @property targetVersions [Array[String]]
              @description
                @p: The target version list to include.
                @p: By default, the changelog will include all @(@version) entities defined within the @(@wraper) that have content.
                @p: This option can be used to exclude versions, allowing only a single version to be built when developing or versions to be excluded.
                @p: For example, if the targetVersions was set to:
                @codeblock js
                  [
                    'Version 3'
                  ]
                @p: The following would only render version 3 but would have processed all the changes from version 1 / 2, meaning Module 1 would still show as 'deprecated' in version 3.
                @@codeblock um
                  @changelog.wrapper
                    @process
                      @version Version 1
                        @api Module 1
                          @added [Module added in this version]

                      @version Version 1
                        @api Module 2
                          @added [Module added in this version]

                      @version Version 2
                        @api Module 1
                          @deprecated [Module deprecated in this version]

                      @version Version 3
                        @api Module 3
                          @added [Module added in this version]

                    @version Version 1
                      @description: Version 1 description

                    @version Version 2
                      @description: Version 2 description

                    @version Version 3
                      @description: Version 3 description

      @define extra
        @entity extra
          @description
            @p: The @(extra) entity can contain any transforms available in the @code(js)[htmlTransforms].
            @p: The content added by extra will always be shown after the other elements in the {{ps}}
            @@codeblock um
              @{{ps}} title
                @description: {{ps}} description

                @extra
                  @div: Extra Item Div


      @define tag
        @entity {{ps}}
          @params title
          @description
            @p: Adds an {{ps}} entry to an item in the changelog.
            @p: Defined by @code(js)[tags.{{ps}}]
            @@codeblock um
              @item Item
                @{{ps}} [Change Name]
                  @description: Change Description

          @entity description
            @description: The description of the entry. This is normally an explanation of the changes made.

          @entity extra
            @description
              @p: The @(extra) entity can contain any transforms available in the @code(js)[htmlTransforms].
              @p: The content added by extra will always be shown after the other elements in the {{ps}}
              @@codeblock um
                @{{ps}} title
                  @description: {{ps}} description

                  @extra
                    @div: Extra Item Div

          @entity issue
            @description
              @p: If an @code(js)[issueUrl] has been provided in the options, issues will be rendered as a link to the relevant issue number.
              @p: For instance, if the @code(js)[issueUrl] was set to @code(js)[www.example.com]
              @@codeblock um
                @issue 1
              @p: This would render a link to @code(js)[www.example.com/1] next to the entry title.
              @p: An entry can have as many issues as required:
              @@codeblock um
                @added
                  @issue 1
                  @issue 2
                  @issue 3

      @entity changelog
        @params title
        @description
          @p: The root level entity for rendering a changelog.
          @p: Each changelog is treated as a 'version'.
          @p: A changelog must have content to be rendered. The minimum requirement is a title and description.
          @@codeblock um
            @changelog Version
              @description: Description

        @extra changelog

        @entity milestone
          @params milestone
          @description
            @p: This allows the use of the @code(js)[milestoneUrl] option to build the url for a changelog, rather than having to specify the whole url using @(@link)
            @p: See the @code(js)[milestoneUrl] api option for more details on setting the milestone url
            @@codeblock um
              @changelog Version
                @milestone 10

        @entity link
          @params url
          @description
            @p: The link to add to the changelog title.
            @p: This can be used to link to a milestone url on GitHub or similar or just another page on the site.
            @@codeblock um
              @changelog Version
                @link(somewhere)

        @entity description
          @description: The description for a changelog version. This is always shown directly underneath the main heading for the changelog.

        @entity item
          @params title
          @description: A changelog item, for instance a module or part of the api that has changed. An item can contain multiple entries in the form of tags.

          @extra item

          @entity link
            @params url
            @description
              @p: The link to add to the item title.
              @@codeblock um
                @item Item
                  @link(somewhere)

          @entity description
            @description: The description of the item.


          @group Tags
            @description
              @p: The tags below are defined by the @code(js)[tags] api option.
              @p: See the @code(js)[tags] api option for more info.
            @tag added
            @tag updated
            @tag deprecated
            @tag removed
            @tag docs
            @tag info
            @tag enhancement
            @tag bugfix


        @entity renderSingleItemInRoot
          @description:
            @p: This entity is a flag that enables a single changelog to be rendered differently from other changelogs without having to use a separate build process.
            @p: See the @code(js)[renderSingleItemInRoot] option in the api options for more details.

      @entity wrapper
        @description
          @p: The wrapper entity doesn't do anything on it's own except allow the wrapping of @(@process) and @(@version) entities to allow dynamic changelogs to be created from versioned api content.
          @p: This is mostly intended for use with the @hyperlink(../api)[api] and @hyperlink(../version)[version] transforms.
          @p: It is recommended that this element be namespaced for clarity when reading the markup
          @p: Below is an example of the expected structure for a processed changelog:
          @@codeblock um
            @changelog.wrapper
              @process
                @version Version 1
                  @api Module 1
                    @added [Module added in this version]

                @version Version 1
                  @api Module 2
                    @added [Module added in this version]

                @version Version 2
                  @api Module 1
                    @deprecated [Module deprecated in this version]

                @version Version 3
                  @api Module 3
                    @added [Module added in this version]

              @version Version 1
                @description: Version 1 description

              @version Version 2
                @description: Version 2 description

              @version Version 3
                @description: Version 3 description


        @entity process
          @description
            @p: An entity that allows the generation of versioned changelogs from multiple @(@version) tags.

          @entity version
            @params version
            @description
              @p: The versions to process. All the @(@version) tags within a @(@process) will be merged and collated to produce a changelog.

          @entity renderSingleItemInRoot
            @description:
              @p: This entity is a flag that enables a single changelog to be rendered differently from other changelogs without having to use a separate build process.
              @p: See the @code(js)[renderSingleItemInRoot] option in the api options for more details.

          @entity dontAddDocsLink
            @description:
              @p: This entity is a flag that enables a single changelog to be rendered differently from other changelogs without having to use a separate build process.
              @p: See the @code(js)[dontAddDocsLink] option in the api options for more details.

        @entity version
          @params version
          @description
            @p: Version entities can be included outside the process entity to allow the changelog items and content to be separated from the description for a version.


      @entity key
        @description
          @p: Renders the key for a changelog, showing the tag icons and what they mean.
          @p: It is recommended that this element be namespaced for clarity when reading the markup:
          @@codeblock um
            @changelog.key

          @p: Using the default tags, the above code evaluates to the following on the page:
          @div .qm-card-background
            @changelog.key





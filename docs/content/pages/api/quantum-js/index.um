@inline ../../../shared/shared.um

@versionList
  @version 1.0.0

@titlebar

@topSection
  @title quantum-js
  @description: The parser, a selection and builder api for quantum markup and AST.

@contentSection
  @siteSidebars
  @topic About
    @sheet
      The core quantum module (quantum-js) consists of a parser for the markup
      language, a selection api for working with the parsed AST (abstract syntax
      tree) and a builder api for programmatically building AST.

  @topic Parsing
    First we will explore how to parse a quantum markup file (which usually has the .um
    extension).

    Here is some example markup:

    @subsection example.um
      @@codeblock um
        \# comments start with a hash

        \# basic structure of an entity
        @type parameters: Content

        \# Entities can contain multiple lines of text content:
        @person parameter1 parameter2
          Name: Alejandro
          Age: 32

        \# And can also have nested entites
        @person parameter1 parameter2
          @name: Alejandro
          @age: 32

        \# Content may be mixed between entities and text
        @button
          @icon fa fa-add
          Click Me!

        \# Entites can also use a more compact single line syntax (when written like this they are called inline entites):
        @type(parameters)[Content]

        \# Inline entites may be placed in the middle of text
        This line has an @bold[inline] entity

        \# The above button example could also be written like this
        @button: @icon(fa fa-add) Click Me!

        \# Parameters with spaces should be wrapped in [...]
        @person parameter1 [parameter2 with spaces]

        \# escaping the @ sign is done by wrapping it (and optionally surrounding text) in @(...)
        @(your.name@ocado.com)

        \# nested content may be completely escaped by starting an entity with @@
        @@codeblock um
          \# this content is treated as text. No entites are parsed when in @@ mode
          @person
            @name: Alejandro
            @age: 32

        \# The hash character can be escaped with \#

    We can parse this markup into an easier-to-work-with object form using the read
    function:

    @codeblock js
      var quantum = require('quantum-js')

      quantum.read.single('example.um').then(function (parsed) {
        // parsed = {filename, content}
      })

    @code(js)[quantum.read] will return a promise that yields an object
    with a filename and content properties. The content property contains the parsed
    AST.

    The parsed object looks something like this:

    @codeblock json
      @inline output.json

  @topic Selection Api
    The selection api allows the selection and manipulation of quantum entities:

    @codeblock js
      var quantum = require('quantum-js')

      quantum.read.single('example.um').then(function (parsed) {
        var entity = parsed.content

        var selection = quantum.select(entity)
        selection.ps()                      // extract the parameter string from an entity
        selection.cs()                      // extract the content string from an entity
        selection.select('banana')          // selects the banana entity from the currently selected entity
        selection.selectAll('kiwi')         // selects all the kiwi entities from the currently selected entity (returns an array)
        selection.select('lemon').params[2] // gets the second parameter from the lemon entity in the selection
      })


  @topic Builder Api
    The builder api allows the creation of quantum AST. Once build is called,
    entities are converted into a selection.

    @codeblock js
      var quantum = require('quantum-js')

      // Builder Api
      var entity = quantum.create('ice-cream')
        .add(quantum.create('description').add('Ice cream of the week'))
        .add(quantum.create('flavor').ps('choc chip'))
        .add(quantum.create('flavor').ps('mint'))
        .add(quantum.create('flavor').ps('vanilla'))
        .build()

    The above code using the builder api would generate the equivalent of the following:

    @@codeblock um
      @ice-cream
        @description: Ice cream of the week
        @flavor choc chip
        @flavor mint
        @flavor vanilla

  @topic Api
    @inline api.um

@footer

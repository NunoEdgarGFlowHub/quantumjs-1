@inline ../../../shared/shared.um

@versionList
  @version 1.0.0

@titlebar

@topSection
  @title Quantum Version
  @description

@contentSection
  @siteSidebars
  @topic About
    @sheet
      This module provides a transform that enables the generation of incrementally versioned content.
      The version transform works well with the @hyperlink(../changelog/)[changelog] and @hyperlink(../api/)[api] transforms
      as the content is iterated upon in a similar method, showing the various tags available.

  @topic Example
    @p: Using the version transform is easy:

    @@codeblock js
      var quantum = require('quantum-js')
      var version = require('quantum-version')
      var html = require('quantum-html')

      var versionOptions = {
        // set version options here
      }

      quantum.read('index.um')
        .map(version(versionOptions)) // this is the bit that deals with @version entities
        .map(html(htmlTransforms))
        .map(html.stringify())
        .map(quantum.write('target'))

    @p: Example markup
    @@codeblock um
      @version 1.0.0
        @api Module 1
          @object example
            @added
            @property exampleString [String]: A string

      @version 2.0.0
        @api Module 1
          @object example
            @property exampleFunction [Function]: A Function

    @p: The above example would output two files, equivalent to:
    @h4: File 1
    @@codeblock um
      @api Module 1
        @object example
          @added
          @property exampleString [String]: A string
    @h4: File 2
    @@codeblock um
      @api Module 1
        @updated
        @object example
          @updated
          @property exampleString [String]: A string
          @property exampleFunction [Function]: A Function
            @added

  @topic Api
    @api
      @function api
        @description:
          @p: A function that returns a function for processing @(@version) entities and outputting a combined set of versions.
          @p: This is the function returned from @code[require('quantum-version')]
        @param? options [Object]: The options to use when processing versions
          @property versions [Array[String]]: An array of the versions to process for when versioning. If left undefined, all the versions found will be rendered.
          @property targetVersions [Array[String]]
            @description:
              @p: The versions to output.
              @p: This allows a subset of the complete list of versions to be output whilst still processing the changes made in other versions.
              @p: If left undefined, this will be the same as @code[versions].

          @property outputLatest [Boolean]: Whether to output the latest version without the filename modifier applied.
            @default true
          @property entityMatchLookup [Function]: A function that returns a unique string for each entity to allow entities to be compared.
            @param entity [Object]: The current entity.
            @returns String: A unique signature or id that describes an entity. This enables the version transform to compare entities and check whether they should be merged when versioning.
            @default
              @codeblock js
                function  (entity) {
                  entity = quantum.select(entity)
                  var name = entity.ps()
                  var params = entity.selectAll(['param', 'param?']).map(function (param) {return param.ps()})
                  return entity.type + ': ' + name + '(' + params.join(', ') + ')'
                }

          @property filenameModifier [Function]: A function for modifying the filename of versioned content so that each version has it's own file.
            @param filename [String]: The name of the current file
            @param version [String]: The name of the current version
            @returns String: The new filename
            @default
              @codeblock js
                function (filename, version) {
                  if (endsWith(filename, 'index.um')) {
                    return filename.replace('index.um', version) + '/' + 'index.um'
                  } else {
                    return filename.replace('.um', '') + '/' + version + '.um'
                  }
                }
          @property taggable [Array[String]]: The array of entities to look for tags within, including the element itself
            @default
              @codeblock js
                [
                  'function',
                  'prototype',
                  'method',
                  'property',
                  'object',
                  'constructor',
                  'returns',
                  'event',
                  'data',
                  'class',
                  'extraclass',
                  'childclass'
                ]
          @property indexable [Array[String]]: The array of entities to look for tags within, excluding the element itself, i.e., only looking within children of the entity.
            @default
              @codeblock js
                [
                  'param',
                  'group'
                ]
          @property unmergeable [Array[String]]: Elements that should not be merged if an updated version is found, e.g. @(@description) elements
            @default [[]]

          @property tags [Object]
            @description:
              @p: An object containing all the tags to look for when versioning the content.
              @p: A tag is defined as follows:
              @@codeblock js
                {
                  entityName: {         // The @entityName of the tag (e.g. @added)
                    retain: false,      // Whether to retain the tag across versions
                    removeEntity: false // Whether to remove the tagged entity in the next version
                  }
                }
            @default
              @codeblock js
                {
                  added: {
                    retain: false,
                    removeEntity: false
                  },
                  updated: {
                    retain: false,
                    removeEntity: false
                  },
                  deprecated: {
                    retain: true,
                    removeEntity: false
                  },
                  removed: {
                    retain: false,
                    removeEntity: true
                  }
                }

        @returns Function
          @description: A function that generates the versioned parts of an object.
          @param obj [Object]: The object to process content for.
          @returns [Object/Array[Object]]: If there is versionable content, an array of processed versions is returned. Otherwise, the original object is returned.

      @entity version
        @params versionName
        @description:
          @p: The entity used to define a version

@inline ../../../shared/shared.um

@titlebar Setting Up | Walkthrough
@author Charlie Frater
@author James Smyth
@date 12/01/2016

@topSection
  @breadcrumb
    @item /docs/: Docs
    @item /docs/walkthrough/setting-up/: Walkthrough
    @item /docs/walkthrough/setting-up/: Setting Up
  @title Walkthrough / Setting up
  @description
    A tutorial that covers a complete walkthrough of the quantum library modules from installing the dependencies to viewing a completed example site.

@contentSection

  @notice TODO [warning]
    Make example repo + add link to example repo

  @sheet
    In this tutorial we are going to cover the process of documenting a ficticous hot drink delivery service.

    This will include:
      @list
        @item: Setting up a project with @bold[quantum-hub]
        @item: Writing some general documentation using the @bold[quantum-docs] module
        @item: Documenting a javascript client library for the service with the @bold[quantum-api] and @bold[quantum-version] modules
        @item: Documenting the tea/coffee making process with the @bold[quantum-diagram] module
        @item: Writing custom transforms for the @bold[quantum-html] module

    The content is designed as an example use case for the quantum library and the finished
    project is available as a git repository @hyperlink(#)[here].

  @topic Setting up a new project

    @section Installing the dependencies
      @sheet
        The first step is to create a package.json in a new directory and then install all the modules as dependencies.

        The directory we'll use for this example will be called 'my-project':

      @codeblock bash
        mkdir my-project # creates the my-project directory
        cd my-project    # change to the my-project directory
        npm init         # initialize npm and create a package.json

      @sheet
        Now that the project has been initialized, the dependencies need to be installed. For now we will install just
        a few of the quantum modules available:

      @codeblock bash
        npm install --save quantum-hub
        npm install --save quantum-html
        npm install --save quantum-docs

    @section Preparing the site structure
      @sheet
        The directory structure for quantum is highly flexible - you can choose how you lay out your files.
        For this tutorial we are going to show an example folder structure that works well in most cases.

        To prepare our example structure, run the following commands from inside 'my-project':

      @@codeblock bash
        mkdir build
        mkdir resources
        mkdir content
        mkdir content/pages
        mkdir content/shared

      @sheet
        This should leave you with a structure as follows:

      @@codeblock bash
        - my-project
        | - build         # The build scripts and any code related to running quantum.
        | - resources     # Any client-side JS/CSS.
        | - content       # All the site content.
          | - pages       # The pages for the site. This will be the site root.
          | - shared      # Quantum content that is shared across multiple pages, such as templates or a common file.
        | - node_modules  # generated by npm install. See 'Installing the dependencies'
        | - package.json  # generated by npm init. See 'Installing the dependencies'

      @sheet
        Now lets move onto setting up the build pipeline. This is a script that will build our site.

    @section Creating a build script
      @sheet
        We are going to use the quantum-hub module for building our site - this module simplifies
        setting up things like watching the source for changes, and runs a web server that reloads
        automatically when files are saved.

        @notice Note
          If quantum-hub doesn't quite fit your needs, there are some lower level modules available called @code(bash)[quantum-js] and @code(bash)[ quantum-watch] as an alternative way of setting up a build script.

      @sheet
        The first step is to create the build script file in the build folder called build.js:

      @subsection build/build.js
        @codeblock js
          var path = require('path')
          var html = require('quantum-html')
          var docs = require('quantum-docs')
          var hub = require('quantum-hub')

          function pipeline () {

            var htmlTransforms = {
              html: html.transforms,
              docs: docs()
            }

            // returns a function that compiles a page out to html
            return function (obj) {
              return Promise.resolve(obj)
                .map(html(htmlTransforms))
                .map(html.stringify(htmlOptions))
            }
          }

          hub.client.watch({
            pipeline: pipeline,
            config: {
              pages: 'content/pages/**/*.um',
              base: 'content/pages'
            },
            resourceDir: path.join(__dirname, '..', 'resources')
          })

      @notice Note [info]
        If you are using an older version of node, you might need to import a promise library. One way can be done
        is by installing bluebird by running this:

        @codeblock bash
          npm install --save bluebird

        then adding the following require at the top of the build/build.js script:

        @codeblock js
          var Promise = require('bluebird')

    @section Create some test content
      @sheet
        Next, we can check that everything has been set up correctly. To do this, we need some example content. Create
        a file called index.um in the content/pages folder:

      @subsection content/pages/index.um
        @@codeblock um
          @h1: Example page
          @p: Omgasdfghjkl, it actually worked!

    @section Build the site
      @sheet
        Now run the build script:

      @codeblock bash
        node build/build.js

      @sheet
        If all has gone well you should see something logged out to the console to indicate that the page was built
        and a web server was started. Visit @hyperlink(http://localhost:8000)[localhost:8000] in your browser to see
        the site that has been built

      @notice Note [info]
        If you get an error, check back through the tutorial for steps that were accidently skipped, or miscopied code snippets.

        If you believe you have done everything correctly, then you can seek help on the issue tracker in github for this project.

  # @topic Using npm tasks to build the site
  #   @p: npm tasks are a good alternative to using @code(bash)[node {file}]

  #   @p: To set them up, open @code(bash)[package.json] and add the following lines to the scripts section
  #   @codeblock json
  #     "server": "node build/server.js",
  #     "build": "node build/index.js",
  #     "start": "npm run build && npm run server"

  #   @p: Your @code(bash)[package.json] should now look similar to this:
  #   @codeblock json
  #     {
  #       "name": "my-project",
  #       "version": "1.0.0",
  #       "description": "",
  #       "main": "index.js",
  #       "scripts": {
  #         "test": "echo \"Error: no test specified\" && exit 1",
  #         "server": "node build/server.js",
  #         "build": "node build/index.js",
  #         "start": "npm run build && npm run server"
  #       },
  #       "keywords": [],
  #       "license": "ISC",
  #       "dependencies": {
  #         "quantum-js": "^1.0.0",
  #         "quantum-html": "^1.0.0",
  #         "live-server": "^0.9.0"
  #       }
  #     }

  #   @p: Now we can run @code(bash)[npm run build] to build the pages and @code(bash)[npm run server] to start the server.
  #   @p: Additionally, we can run @code(bash)[npm start] to build the pages and start the server with one command.


  # @topicsection Creating additional content
  #   @p: To create more pages for the site, first create a directory with the desired page name and then create an @code(um)[index.um] file inside it.
  #   @p: For this example, we'll create a @code(bash)[demo] page.

  #   @p: Create the @code(bash)[demo] directory inside the @code(bash)[pages] and add an @code(um)[index.um] file with some content:

  #   @@codeblock um
  #     @h1: Demo
  #     @p: Demo page
  #     @hyperlink(/)[Home]

  #   @@codeblock bash
  #     - my-project
  #     |- package.json
  #     |- node_modules
  #     |- pages
  #      |- index.um
  #      |- demo
  #       |- index.um
  #     |- build
  #      |- index.js
  #     |- target # generated by build script

  #   @p: Running @code(bash)[npm start] will then build the pages and if we navigate to @code(bash)[http://localhost:9000/demo] the new page will be shown.

@bottomSection
  @paginationButtons
    @next /docs/walkthrough/adding-content: Adding Content


@footer
@inline ../../shared/shared.um

@title Complete Walkthrough
@author Charlie Frater
@date 12/01/2016

@titlebar

@topSection
  @breadcrumb
    @item /docs/: Docs
    @item /docs/tutorial/: Tutorial
  @title Complete Walkthrough
  @description
    A tutorial that covers a complete walkthrough of the quantum library modules from installing the dependencies to viewing a completed example site.

@contentSection
  @sheet
     This tutorial covers the steps needed to build a website to document a simple API for making tea and coffee as well as creating a flow diagram for the tea/coffee making process.

     The content is designed as an example use case for the quantum library and the finished project is available as a git repository

     TODO: Make example reop + add link to example repo

  @topic Preparing a project to use quantum

    @section Installing the dependencies
      @sheet
        The first step is to create a package.json in a new directory and then install all the modules as dependencies.

        The directory we'll use for this example will be called 'my_project':

      @codeblock bash
        mkdir my_project # creates the my_project directory
        cd my_project    # change to the my_project directory
        npm init         # initialize npm and create a package.json

      @sheet
        Now that the project has been initialized, the dependencies need to be installed:

      @codeblock bash
        npm install --save quantum-api
        npm install --save quantum-changelog
        npm install --save quantum-diagram
        npm install --save quantum-docs
        npm install --save quantum-html
        npm install --save quantum-hub
        npm install --save quantum-js
        npm install --save quantum-template
        npm install --save quantum-version

    @section Preparing the site structure
      @sheet
        The directory structure for quantum is highly flexible which allows the code for building the site to be kept separate from the site content.

        To prepare the structure, run the following commands from inside 'my_project':

      @@codeblock bash
        mkdir build
        cd build
        mkdir transforms
        cd ../
        mkdir content
        cd content
        mkdir pages
        mkdir resources
        mkdir shared
        cd ../

      @sheet
        This should leave you with a structure as follows:

      @@codeblock bash
        - my_project
        | - build         # The build scripts and any code related to running quantum.
          | - transforms  # Any custom transformation scripts.
        | - content       # All the site content.
          | - pages       # The pages for the site. This will be the site root.
          | - resources   # Any client-side JS/CSS.
          | - shared      # Quantum content that is shared across multiple pages, such as templates or a common file.
        | - node_modules  # generated by npm install. See 'Installing the dependencies'
        | - package.json  # generated by npm init. See 'Installing the dependencies'


    @section Creating a build script
      @sheet
        TODO


  @topic Creating a custom transform
    @sheet
      TODO: Custom transform for something simple?


  @topic Adding content to the site
    @sheet
      TODO

    @section Creating a home page
      @sheet
        TODO

    @section Creating a flow diagram
      @sheet
        TODO

    @section Creating the versioned APIs
      @sheet
        TODO

    @section Adding a changelog
      @sheet
        TODO


  @topic Viewing the compiled site
    @sheet
      For viewing the compiled site, it is recommended that a local server is used. There are several tools available for this, however for this example we'll use @hyperlink(https://www.npmjs.com/package/live-server)[live-server] as it provides live-reloading and does not require much config to set up.

    @section Installing the dependency
      @sheet
        The first step is to install the @code(bash)[live-server] module as a dependency for your project:

      @codeblock bash
        npm install --save live-server

    @section Creating the script
      @sheet
        Create @code(bash)[server.js] in the build directory and add the following code:

      @codeblock js
        require('live-server').start({
          port: 9000,
          root: 'target',
          open: true
        })

    @section Using the script
      @sheet
        The script can be run using node:

      @codeblock bash
        node build/server.js

      @sheet
        This will start a server and open a new tab with the @code(bash)[target] as the root directory which will be treated as a website.

        If you don't want it to open a new tab every time, you can set the @code(bash)[open] option to false.

  # @topic Using npm tasks to build the site



@footer
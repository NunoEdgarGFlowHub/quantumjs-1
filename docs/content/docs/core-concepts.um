@inline ../../shared/shared.um

@titlebar

@topSection
  @breadcrumb
    @item /docs/: Docs
    @item /docs/core-concepts/: Core Concepts
  @title Core Concepts
  @description
    This page explains some of the concepts used in quantumjs, including the pipeline, pipeline transforms and entity html transforms.

@contentSection

  @topic The Markup Language
    @sheet
      Content is written using the quantum markup language. Here is an overview of the language:

    @@codeblock um

      \# comments start with a hash

      \# basic structure of an entity
      @type parameters: Content

      \# Entities can contain multiple lines of text content:
      @person parameter1 parameter2
        Name: Alejandro
        Age: 32

      \# And can also have nested entites
      @person parameter1 parameter2
        @name: Alejandro
        @age: 32

      \# Content may be mixed between entities and text
      @button
        @icon fa fa-add
        Click Me!

      \# Entites can also use a more compact single line syntax (when written like this they are called inline entites):
      @type(parameters)[Content]

      \# Inline entites may be placed in the middle of text
      This line has an @bold[inline] entity

      \# The above button example could also be written like this
      @button: @icon(fa fa-add) Click Me!

      \# Parameters with spaces should be wrapped in [...]
      @person parameter1 [parameter2 with spaces]

      \# escaping the @ sign is done by wrapping it (and optionally surrounding text) in @(...)
      @(your.name@ocado.com)

      \# nested content may be completely escaped by starting an entity with @@
      @@codeblock um
        \# this content is treated as text. No entites are parsed when in @@ mode
        @person
          @name: Alejandro
          @age: 32

      \# The hash character can be escaped with \#




  @topic The Pipeline
    @sheet
      TODO: describe what the pipeline is / how it works

  @topic The AST
    @sheet
      TODO: describe what the ast is (show a small snippet of um and the associated ast)

  @topic Pipeline Transforms
    @sheet
      TODO: Describe what a pipeline transform is: just a function that transforms something to something else (normally ast -> ast)

  @topic Entities
    @sheet
      TODO: Describe what an entity is (or is this well enough covered by the markup section above?)

  @topic Entity Transforms
    @sheet
      TODO: Describe whan an entity transform is (entity -> virtual dom)

@bottomSection
  @paginationButtons
    @previous /: Home
    @next /docs/: Docs Home Page

@footer
@script hexagon.js
@stylesheet hexagon.css
@stylesheet [//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css]

@div .hx-content

  @h1: Api
  @api

    @function test
      @added
      @removed
      @deprecated

      @param test-proto

    @function hx.animate
      @added
        This is a test added flag
      @description
        Constructs a new animation that will be applied to the node specified.
      @param node [HTMLElement]
      @param? ease [Function]
        The easing function to use for the animations. See hx.ease for some pre-built easing functions.
        @param value [Number]: The input value
        @returns Number: The value after it has been transformed by the easing function

      @returns Animation: The newly constructed Animation object.

    @function hx.morph
      @removed
        @alternative
          @codeblock js
            do.something.else();
      @description
        Constructs a new morph that will be applied to the node specified.
      @param node [HTMLElement]
      @returns Morph: The newly constructed Morph object.

    @function hx.morph.register
      @description: Registers a named morph action.
      @param name [String]: The name to register the action under
      @param action [Function]
        @deprecated
        A function that performs the action
        @param node [HTMLElement]: The node to apply the action to (if it makes sense to apply the action to a node)
        @param duration [Number]: The length the action should take in milliseconds. The action being defined should respect this value.

    @prototype Animation
      @description
        A class for animating the styles and attributes of a Node.

      @method style
        @description: Animates a style property on the node.
        @param property [String]: The style property to animate
        @param endValue [String/Number]: The value to animate the property to
        @param? duration [Number]
          The length of the animation in milliseconds
          @default 200
        @returns Animation: This Animation, for chaining.

      @method style
        @description: Animates a style property on the node.
        @param property [String]: The style property to animate
        @param startValue [String/Number]: The value to animate the property from
        @param endValue [String/Number]: The value to animate the property to
        @param duration [Number]: The length of the animation in milliseconds.
        @returns Animation: This Animation, for chaining.

      @method attr
        @description: Animates an attribute on the node.
        @param attribute [String]: The attribute to animate
        @param endValue [String/Number]: The value to animate the attribute to
        @param? duration [Number]
          The length of the animation in milliseconds
          @default 200
        @returns Animation: This Animation, for chaining.

      @method attr
        @description: Animates an attribute on the node.
        @param attribute [String]: The attribute to animate
        @param startValue [String/Number]: The value to animate the attribute from
        @param endValue [String/Number]: The value to animate the attribute to
        @param duration [Number]: The length of the animation in milliseconds.
        @returns Animation: This Animation, for chaining.

      @method cancel
        @description: Cancels this animation.
        @returns Animation: This Animation, for chaining.

      @method on
        @description:
          Register a function that should be called every time an event of the given name happens.
          The types of events that may be emitted are:

          @eventlist
            @event end: Emitted when all of the animations specified have ended.
            @event cancelled: Emitted when cancel() is called on this animation.

        @param name [String]: The name of the event to listen for
        @param callback [Function]
          The callback that gets called when the event happens
          @param data [Any]: Any data that accompanies the event

        @returns Animation: This Animation, for chaining.

        @event change [Object]
          @description: The change event
          @property age [Number]: Something here
          @property name [String]: Something here

        @event name-change [String]
          @description: The change event
          @property age [Number]: Something here
          @property name [String]: Something here


    @prototype Morph
      @description
        A class for chaining animations, asynchronous function calls, and synchronous function calls together.

      @constructor
        @param something [Number]

      @method and
        @description: Adds an action that should happen concurrently with the previous action
        @param morph [String]: The named morph to use.
        @param? duration [Number]
          The length of the action in milliseconds.
          @default 200
        @returns Animation: This Morph, for chaining.

      @method and
        @description: Adds an action that should happen concurrently with the previous action
        @param function [Function]
          A function that gets called as part of the chain. If this function returns an EventEmitter, the behaviour is to wait for that event emitter to emit an 'end' event before proceeding to the next step. Anything that is returned from this function that has a 'cancel' method will be called
          @param? done [Function]
            @updated
            If specified in the argument list, this action will only complete when this function is called to complete the action. If this is not specified in the argument list the function will be called synchronously (ie it will block). The later option is useful for cleanup at the end of a morph.
        @returns Morph: This Morph, for chaining.

      @method then
        @description: Adds an action that should happen after the previous action
        @param morph [String]: The named morph to use.
        @param? duration [Number]
          The length of the action in milliseconds.
          @default 200
        @returns Morph: A new Morph object that is linked to the previous morph's end trigger. This morph will contain a single action - the one specified as part of this call to then.

      @method then
        @description: Adds an action that should happen after the previous action
        @param function [Function]
          A function that gets called as part of the chain. If this function returns an EventEmitter, the behaviour is to wait for that event emitter to emit an 'end' event before proceeding to the next step. Anything that is returned from this function that has a 'cancel' method will be called
          @param? done [Function]
            If specified in the argument list, this action will only complete when this function is called to complete the action. If this is not specified in the argument list the function will be called synchronously (ie it will block). The later option is useful for clean-up at the end of a morph.
        @returns Morph: A new Morph object that is linked to the previous morph's end trigger. This morph will contain a single action - the one specified as part of this call to then.

      @method andStyle
        @description: Adds an action that styles the element concurrently with the previous action.
        @param property [String]: The style property to animate
        @param endValue [String/Number]: The value to animate the property to
        @param? duration [Number]
          The length of the action in milliseconds.
          @default 200
        @returns Morph: This Morph, for chaining.

      @method andStyle
        @description: Adds an action that styles the element concurrently with the previous action.
        @param property [String]: The style property to animate
        @param startValue [String/Number]: The value to animate the property from
        @param endValue [String/Number]: The value to animate the property to
        @param duration [Number]: The length of the action in milliseconds.
        @returns Morph: This Morph, for chaining.

      @method thenStyle
        @description: Adds an action that styles the element after the previous action completes.
        @param property [String]: The style property to animate
        @param endValue [String/Number]: The value to animate the property to
        @param? duration [Number]
          The length of the action in milliseconds.
          @default 200
        @returns Morph: A new Morph object that is linked to the previous morph's end trigger. This morph will contain a single action - the one specified as part of this call to then.

      @method thenStyle
        @description: Adds an action that styles the element after the previous action completes.
        @param property [String]: The style property to animate
        @param startValue [String/Number]: The value to animate the property from
        @param endValue [String/Number]: The value to animate the property to
        @param duration [Number]: The length of the action in milliseconds.
        @returns Morph: A new Morph object that is linked to the previous morph's end trigger. This morph will contain a single action - the one specified as part of this call to then.

      @method andAttr
        @description: Adds an action that animates an attributes value on the element concurrently with the previous action.
        @param property [String]: The style property to animate
        @param endValue [String/Number]: The value to animate the property to
        @param? duration [Number]
          The length of the action in milliseconds.
          @default 200
        @returns Morph: This Morph, for chaining.

      @method andAttr
        @description: Adds an action that animates an attributes value on the element concurrently with the previous action.
        @param property [String]: The style property to animate
        @param startValue [String/Number]: The value to animate the property from
        @param endValue [String/Number]: The value to animate the property to
        @param duration [Number]: The length of the action in milliseconds.
        @returns Morph: This Morph, for chaining.

      @method thenAttr
        @description: Adds an action that animates an attributes value on the element after the previous action completes.
        @param property [String]: The style property to animate
        @param endValue [String/Number]: The value to animate the property to
        @param? duration [Number]
          The length of the action in milliseconds.
          @default 200
        @returns Morph: A new Morph object that is linked to the previous morph's end trigger. This morph will contain a single action - the one specified as part of this call to then.

      @method thenAttr
        @description: Adds an action that animates an attributes value on the element after the previous action completes.
        @param property [String]: The style property to animate
        @param startValue [String/Number]: The value to animate the property from
        @param endValue [String/Number]: The value to animate the property to
        @param duration [Number]: The length of the action in milliseconds.
        @returns Morph: A new Morph object that is linked to the previous morph's end trigger. This morph will contain a single action - the one specified as part of this call to then.

      @method go
        @description: Starts this morph. This should always be called at the end of the chain of actions.
        @param? cancelOngoing [Boolean]: Stops any ongoing morphs for the selected node
          @default false
        @returns Morph: This Morph, for chaining.

      @method on
        @description:
          Register a function that should be called every time an event of the given name happens.
          The types of events that may be emitted are:

          @eventlist
            @event end: Emitted when the entire chain of actions have finished for this morph.
            @event cancelled: Emitted when cancel() is called on this animation.

        @param name [String]: The name of the event to listen for
        @param callback [Function]
          The callback that gets called when the event happens
          @param data [Any]: Any data that accompanies the event

        @returns Animation: This Animation, for chaining.

    @prototype Selection
      @description
        This module adds some methods to the selection api's prototype.

      @method animate
        @description
          Creates a new animation using the first node in the selection
        @returns Animation

      @method morph
        @description
          Creates a new morph using the first node in the selection
        @returns Morph